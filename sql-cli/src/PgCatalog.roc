# This file was automatically generated by roc-sql
module [
    pgStatistic,
    pgType,
    pgForeignTable,
    pgAuthid,
    pgShadow,
    pgRoles,
    pgStatisticExtData,
    pgSettings,
    pgFileSettings,
    pgHbaFileRules,
    pgIdentFileMappings,
    pgConfig,
    pgShmemAllocations,
    pgBackendMemoryContexts,
    pgUserMapping,
    pgStatActivity,
    pgReplicationOriginStatus,
    pgSubscription,
    pgAttribute,
    pgProc,
    pgClass,
    pgAttrdef,
    pgConstraint,
    pgInherits,
    pgIndex,
    pgStatReplication,
    pgStatSlru,
    pgStatWalReceiver,
    pgStatRecoveryPrefetch,
    pgOperator,
    pgOpfamily,
    pgOpclass,
    pgAm,
    pgAmop,
    pgAmproc,
    pgLanguage,
    pgLargeobjectMetadata,
    pgAggregate,
    pgStatisticExt,
    pgRewrite,
    pgTrigger,
    pgEventTrigger,
    pgDescription,
    pgCast,
    pgEnum,
    pgNamespace,
    pgConversion,
    pgDepend,
    pgDatabase,
    pgDbRoleSetting,
    pgTablespace,
    pgAuthMembers,
    pgShdepend,
    pgShdescription,
    pgTsConfig,
    pgTsConfigMap,
    pgTsDict,
    pgTsParser,
    pgTsTemplate,
    pgExtension,
    pgForeignDataWrapper,
    pgForeignServer,
    pgPolicy,
    pgReplicationOrigin,
    pgDefaultAcl,
    pgInitPrivs,
    pgSeclabel,
    pgShseclabel,
    pgCollation,
    pgParameterAcl,
    pgPartitionedTable,
    pgRange,
    pgTransform,
    pgSequence,
    pgPublication,
    pgPublicationNamespace,
    pgPublicationRel,
    pgSubscriptionRel,
    pgGroup,
    pgUser,
    pgPolicies,
    pgRules,
    pgViews,
    pgTables,
    pgMatviews,
    pgIndexes,
    pgSequences,
    pgStats,
    pgStatsExt,
    pgStatsExtExprs,
    pgPublicationTables,
    pgLocks,
    pgCursors,
    pgAvailableExtensions,
    pgAvailableExtensionVersions,
    pgPreparedXacts,
    pgPreparedStatements,
    pgSeclabels,
    pgTimezoneAbbrevs,
    pgTimezoneNames,
    pgStatSysTables,
    pgStatXactSysTables,
    pgStatUserTables,
    pgStatAllTables,
    pgStatXactAllTables,
    pgStatXactUserTables,
    pgStatioAllTables,
    pgStatioSysTables,
    pgStatioUserTables,
    pgStatAllIndexes,
    pgStatSysIndexes,
    pgStatUserIndexes,
    pgStatioAllIndexes,
    pgStatioSysIndexes,
    pgStatioUserIndexes,
    pgStatioAllSequences,
    pgStatioSysSequences,
    pgStatioUserSequences,
    pgStatSubscription,
    pgStatSsl,
    pgStatGssapi,
    pgReplicationSlots,
    pgStatReplicationSlots,
    pgStatDatabase,
    pgStatDatabaseConflicts,
    pgStatUserFunctions,
    pgStatXactUserFunctions,
    pgStatArchiver,
    pgStatBgwriter,
    pgStatWal,
    pgStatProgressAnalyze,
    pgStatProgressVacuum,
    pgStatProgressCluster,
    pgStatProgressCreateIndex,
    pgStatProgressBasebackup,
    pgStatProgressCopy,
    pgUserMappings,
    pgStatSubscriptionStats,
    pgLargeobject,
]

import pg.Sql exposing [identifier]
import pg.Sql.Types

pgStatisticStainherit : Sql.Types.Decode (Sql.Types.PgBool { pgStatisticStainherit : {} }) Bool
pgStatisticStainherit = Sql.Types.bool

pgStatisticStaattnum : Sql.Types.Decode (Sql.Types.PgI16 { pgStatisticStaattnum : {} }) I16
pgStatisticStaattnum = Sql.Types.i16

pgStatisticStarelid : Sql.Types.Decode (Sql.Types.PgI32 { pgStatisticStarelid : {} }) I32
pgStatisticStarelid = Sql.Types.i32

pgStatistic = {
    schema: "pg_catalog",
    name: "pg_statistic",
    alias: "ps",
    columns: |alias| {
        stainherit: identifier alias "stainherit" pgStatisticStainherit,
        stakind5: identifier alias "stakind5" Sql.Types.i16,
        stakind4: identifier alias "stakind4" Sql.Types.i16,
        stakind3: identifier alias "stakind3" Sql.Types.i16,
        stakind2: identifier alias "stakind2" Sql.Types.i16,
        stakind1: identifier alias "stakind1" Sql.Types.i16,
        staattnum: identifier alias "staattnum" pgStatisticStaattnum,
        stawidth: identifier alias "stawidth" Sql.Types.i32,
        stacoll5: identifier alias "stacoll5" Sql.Types.i32,
        stacoll4: identifier alias "stacoll4" Sql.Types.i32,
        stacoll3: identifier alias "stacoll3" Sql.Types.i32,
        stacoll2: identifier alias "stacoll2" Sql.Types.i32,
        stacoll1: identifier alias "stacoll1" Sql.Types.i32,
        staop5: identifier alias "staop5" Sql.Types.i32,
        staop4: identifier alias "staop4" Sql.Types.i32,
        staop3: identifier alias "staop3" Sql.Types.i32,
        staop2: identifier alias "staop2" Sql.Types.i32,
        staop1: identifier alias "staop1" Sql.Types.i32,
        starelid: identifier alias "starelid" pgStatisticStarelid,
        stadistinct: identifier alias "stadistinct" Sql.Types.f32,
        stanullfrac: identifier alias "stanullfrac" Sql.Types.f32,
        stavalues5: identifier alias "stavalues5" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        stavalues4: identifier alias "stavalues4" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        stavalues3: identifier alias "stavalues3" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        stavalues2: identifier alias "stavalues2" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        stavalues1: identifier alias "stavalues1" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        stanumbers5: identifier alias "stanumbers5" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        stanumbers4: identifier alias "stanumbers4" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        stanumbers3: identifier alias "stanumbers3" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        stanumbers2: identifier alias "stanumbers2" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        stanumbers1: identifier alias "stanumbers1" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
    },
}

pgTypeOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTypeOid : {} }) I32
pgTypeOid = Sql.Types.i32

pgType = {
    schema: "pg_catalog",
    name: "pg_type",
    alias: "pt",
    columns: |alias| {
        typnotnull: identifier alias "typnotnull" Sql.Types.bool,
        typisdefined: identifier alias "typisdefined" Sql.Types.bool,
        typispreferred: identifier alias "typispreferred" Sql.Types.bool,
        typbyval: identifier alias "typbyval" Sql.Types.bool,
        typstorage: identifier alias "typstorage" Sql.Types.str,
        typalign: identifier alias "typalign" Sql.Types.str,
        typdelim: identifier alias "typdelim" Sql.Types.str,
        typcategory: identifier alias "typcategory" Sql.Types.str,
        typtype: identifier alias "typtype" Sql.Types.str,
        typname: identifier alias "typname" Sql.Types.str,
        typlen: identifier alias "typlen" Sql.Types.i16,
        typndims: identifier alias "typndims" Sql.Types.i32,
        typtypmod: identifier alias "typtypmod" Sql.Types.i32,
        typanalyze: identifier alias "typanalyze" (Sql.Types.unsupported "regproc"),
        typmodout: identifier alias "typmodout" (Sql.Types.unsupported "regproc"),
        typmodin: identifier alias "typmodin" (Sql.Types.unsupported "regproc"),
        typsend: identifier alias "typsend" (Sql.Types.unsupported "regproc"),
        typreceive: identifier alias "typreceive" (Sql.Types.unsupported "regproc"),
        typoutput: identifier alias "typoutput" (Sql.Types.unsupported "regproc"),
        typinput: identifier alias "typinput" (Sql.Types.unsupported "regproc"),
        typsubscript: identifier alias "typsubscript" (Sql.Types.unsupported "regproc"),
        typdefault: identifier alias "typdefault" (Sql.Types.nullable Sql.Types.str),
        typcollation: identifier alias "typcollation" Sql.Types.i32,
        typbasetype: identifier alias "typbasetype" Sql.Types.i32,
        typarray: identifier alias "typarray" Sql.Types.i32,
        typelem: identifier alias "typelem" Sql.Types.i32,
        typrelid: identifier alias "typrelid" Sql.Types.i32,
        typowner: identifier alias "typowner" Sql.Types.i32,
        typnamespace: identifier alias "typnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgTypeOid,
        typdefaultbin: identifier alias "typdefaultbin" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        typacl: identifier alias "typacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgForeignTableFtrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgForeignTableFtrelid : {} }) I32
pgForeignTableFtrelid = Sql.Types.i32

pgForeignTable = {
    schema: "pg_catalog",
    name: "pg_foreign_table",
    alias: "pft",
    columns: |alias| {
        ftserver: identifier alias "ftserver" Sql.Types.i32,
        ftrelid: identifier alias "ftrelid" pgForeignTableFtrelid,
        ftoptions: identifier alias "ftoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgAuthidOid : Sql.Types.Decode (Sql.Types.PgI32 { pgAuthidOid : {} }) I32
pgAuthidOid = Sql.Types.i32

pgAuthid = {
    schema: "pg_catalog",
    name: "pg_authid",
    alias: "pa",
    columns: |alias| {
        rolbypassrls: identifier alias "rolbypassrls" Sql.Types.bool,
        rolreplication: identifier alias "rolreplication" Sql.Types.bool,
        rolcanlogin: identifier alias "rolcanlogin" Sql.Types.bool,
        rolcreatedb: identifier alias "rolcreatedb" Sql.Types.bool,
        rolcreaterole: identifier alias "rolcreaterole" Sql.Types.bool,
        rolinherit: identifier alias "rolinherit" Sql.Types.bool,
        rolsuper: identifier alias "rolsuper" Sql.Types.bool,
        rolname: identifier alias "rolname" Sql.Types.str,
        rolconnlimit: identifier alias "rolconnlimit" Sql.Types.i32,
        rolpassword: identifier alias "rolpassword" (Sql.Types.nullable Sql.Types.str),
        oid: identifier alias "oid" pgAuthidOid,
        rolvaliduntil: identifier alias "rolvaliduntil" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgShadow = {
    schema: "pg_catalog",
    name: "pg_shadow",
    alias: "ps",
    columns: |alias| {
        usebypassrls: identifier alias "usebypassrls" (Sql.Types.nullable Sql.Types.bool),
        userepl: identifier alias "userepl" (Sql.Types.nullable Sql.Types.bool),
        usesuper: identifier alias "usesuper" (Sql.Types.nullable Sql.Types.bool),
        usecreatedb: identifier alias "usecreatedb" (Sql.Types.nullable Sql.Types.bool),
        usename: identifier alias "usename" (Sql.Types.nullable Sql.Types.str),
        passwd: identifier alias "passwd" (Sql.Types.nullable Sql.Types.str),
        usesysid: identifier alias "usesysid" (Sql.Types.nullable Sql.Types.i32),
        valuntil: identifier alias "valuntil" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        useconfig: identifier alias "useconfig" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgRoles = {
    schema: "pg_catalog",
    name: "pg_roles",
    alias: "pr",
    columns: |alias| {
        rolbypassrls: identifier alias "rolbypassrls" (Sql.Types.nullable Sql.Types.bool),
        rolreplication: identifier alias "rolreplication" (Sql.Types.nullable Sql.Types.bool),
        rolcanlogin: identifier alias "rolcanlogin" (Sql.Types.nullable Sql.Types.bool),
        rolcreatedb: identifier alias "rolcreatedb" (Sql.Types.nullable Sql.Types.bool),
        rolcreaterole: identifier alias "rolcreaterole" (Sql.Types.nullable Sql.Types.bool),
        rolinherit: identifier alias "rolinherit" (Sql.Types.nullable Sql.Types.bool),
        rolsuper: identifier alias "rolsuper" (Sql.Types.nullable Sql.Types.bool),
        rolname: identifier alias "rolname" (Sql.Types.nullable Sql.Types.str),
        rolconnlimit: identifier alias "rolconnlimit" (Sql.Types.nullable Sql.Types.i32),
        rolpassword: identifier alias "rolpassword" (Sql.Types.nullable Sql.Types.str),
        oid: identifier alias "oid" (Sql.Types.nullable Sql.Types.i32),
        rolvaliduntil: identifier alias "rolvaliduntil" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        rolconfig: identifier alias "rolconfig" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgStatisticExtDataStxdinherit : Sql.Types.Decode (Sql.Types.PgBool { pgStatisticExtDataStxdinherit : {} }) Bool
pgStatisticExtDataStxdinherit = Sql.Types.bool

pgStatisticExtDataStxoid : Sql.Types.Decode (Sql.Types.PgI32 { pgStatisticExtDataStxoid : {} }) I32
pgStatisticExtDataStxoid = Sql.Types.i32

pgStatisticExtData = {
    schema: "pg_catalog",
    name: "pg_statistic_ext_data",
    alias: "psed",
    columns: |alias| {
        stxdinherit: identifier alias "stxdinherit" pgStatisticExtDataStxdinherit,
        stxoid: identifier alias "stxoid" pgStatisticExtDataStxoid,
        stxdndistinct: identifier alias "stxdndistinct" (Sql.Types.nullable (Sql.Types.unsupported "pg_ndistinct")),
        stxddependencies: identifier alias "stxddependencies" (Sql.Types.nullable (Sql.Types.unsupported "pg_dependencies")),
        stxdmcv: identifier alias "stxdmcv" (Sql.Types.nullable (Sql.Types.unsupported "pg_mcv_list")),
        stxdexpr: identifier alias "stxdexpr" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "pg_statistic")))),
    },
}

pgSettings = {
    schema: "pg_catalog",
    name: "pg_settings",
    alias: "ps",
    columns: |alias| {
        pendingRestart: identifier alias "pending_restart" (Sql.Types.nullable Sql.Types.bool),
        sourceline: identifier alias "sourceline" (Sql.Types.nullable Sql.Types.i32),
        sourcefile: identifier alias "sourcefile" (Sql.Types.nullable Sql.Types.str),
        resetVal: identifier alias "reset_val" (Sql.Types.nullable Sql.Types.str),
        bootVal: identifier alias "boot_val" (Sql.Types.nullable Sql.Types.str),
        maxVal: identifier alias "max_val" (Sql.Types.nullable Sql.Types.str),
        minVal: identifier alias "min_val" (Sql.Types.nullable Sql.Types.str),
        source: identifier alias "source" (Sql.Types.nullable Sql.Types.str),
        vartype: identifier alias "vartype" (Sql.Types.nullable Sql.Types.str),
        context: identifier alias "context" (Sql.Types.nullable Sql.Types.str),
        extraDesc: identifier alias "extra_desc" (Sql.Types.nullable Sql.Types.str),
        shortDesc: identifier alias "short_desc" (Sql.Types.nullable Sql.Types.str),
        category: identifier alias "category" (Sql.Types.nullable Sql.Types.str),
        unit: identifier alias "unit" (Sql.Types.nullable Sql.Types.str),
        setting: identifier alias "setting" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        enumvals: identifier alias "enumvals" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgFileSettings = {
    schema: "pg_catalog",
    name: "pg_file_settings",
    alias: "pfs",
    columns: |alias| {
        applied: identifier alias "applied" (Sql.Types.nullable Sql.Types.bool),
        seqno: identifier alias "seqno" (Sql.Types.nullable Sql.Types.i32),
        sourceline: identifier alias "sourceline" (Sql.Types.nullable Sql.Types.i32),
        error: identifier alias "error" (Sql.Types.nullable Sql.Types.str),
        setting: identifier alias "setting" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        sourcefile: identifier alias "sourcefile" (Sql.Types.nullable Sql.Types.str),
    },
}

pgHbaFileRules = {
    schema: "pg_catalog",
    name: "pg_hba_file_rules",
    alias: "phfr",
    columns: |alias| {
        lineNumber: identifier alias "line_number" (Sql.Types.nullable Sql.Types.i32),
        error: identifier alias "error" (Sql.Types.nullable Sql.Types.str),
        authMethod: identifier alias "auth_method" (Sql.Types.nullable Sql.Types.str),
        netmask: identifier alias "netmask" (Sql.Types.nullable Sql.Types.str),
        address: identifier alias "address" (Sql.Types.nullable Sql.Types.str),
        type: identifier alias "type" (Sql.Types.nullable Sql.Types.str),
        options: identifier alias "options" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        userName: identifier alias "user_name" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        database: identifier alias "database" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgIdentFileMappings = {
    schema: "pg_catalog",
    name: "pg_ident_file_mappings",
    alias: "pifm",
    columns: |alias| {
        lineNumber: identifier alias "line_number" (Sql.Types.nullable Sql.Types.i32),
        error: identifier alias "error" (Sql.Types.nullable Sql.Types.str),
        pgUsername: identifier alias "pg_username" (Sql.Types.nullable Sql.Types.str),
        sysName: identifier alias "sys_name" (Sql.Types.nullable Sql.Types.str),
        mapName: identifier alias "map_name" (Sql.Types.nullable Sql.Types.str),
    },
}

pgConfig = {
    schema: "pg_catalog",
    name: "pg_config",
    alias: "pc",
    columns: |alias| {
        setting: identifier alias "setting" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
    },
}

pgShmemAllocations = {
    schema: "pg_catalog",
    name: "pg_shmem_allocations",
    alias: "psa",
    columns: |alias| {
        allocatedSize: identifier alias "allocated_size" (Sql.Types.nullable Sql.Types.i64),
        size: identifier alias "size" (Sql.Types.nullable Sql.Types.i64),
        off: identifier alias "off" (Sql.Types.nullable Sql.Types.i64),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
    },
}

pgBackendMemoryContexts = {
    schema: "pg_catalog",
    name: "pg_backend_memory_contexts",
    alias: "pbmc",
    columns: |alias| {
        usedBytes: identifier alias "used_bytes" (Sql.Types.nullable Sql.Types.i64),
        freeChunks: identifier alias "free_chunks" (Sql.Types.nullable Sql.Types.i64),
        freeBytes: identifier alias "free_bytes" (Sql.Types.nullable Sql.Types.i64),
        totalNblocks: identifier alias "total_nblocks" (Sql.Types.nullable Sql.Types.i64),
        totalBytes: identifier alias "total_bytes" (Sql.Types.nullable Sql.Types.i64),
        level: identifier alias "level" (Sql.Types.nullable Sql.Types.i32),
        parent: identifier alias "parent" (Sql.Types.nullable Sql.Types.str),
        ident: identifier alias "ident" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
    },
}

pgUserMappingOid : Sql.Types.Decode (Sql.Types.PgI32 { pgUserMappingOid : {} }) I32
pgUserMappingOid = Sql.Types.i32

pgUserMapping = {
    schema: "pg_catalog",
    name: "pg_user_mapping",
    alias: "pum",
    columns: |alias| {
        umserver: identifier alias "umserver" Sql.Types.i32,
        umuser: identifier alias "umuser" Sql.Types.i32,
        oid: identifier alias "oid" pgUserMappingOid,
        umoptions: identifier alias "umoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgStatActivity = {
    schema: "pg_catalog",
    name: "pg_stat_activity",
    alias: "psa",
    columns: |alias| {
        usename: identifier alias "usename" (Sql.Types.nullable Sql.Types.str),
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        queryId: identifier alias "query_id" (Sql.Types.nullable Sql.Types.i64),
        clientPort: identifier alias "client_port" (Sql.Types.nullable Sql.Types.i32),
        leaderPid: identifier alias "leader_pid" (Sql.Types.nullable Sql.Types.i32),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        backendType: identifier alias "backend_type" (Sql.Types.nullable Sql.Types.str),
        query: identifier alias "query" (Sql.Types.nullable Sql.Types.str),
        state: identifier alias "state" (Sql.Types.nullable Sql.Types.str),
        waitEvent: identifier alias "wait_event" (Sql.Types.nullable Sql.Types.str),
        waitEventType: identifier alias "wait_event_type" (Sql.Types.nullable Sql.Types.str),
        clientHostname: identifier alias "client_hostname" (Sql.Types.nullable Sql.Types.str),
        applicationName: identifier alias "application_name" (Sql.Types.nullable Sql.Types.str),
        usesysid: identifier alias "usesysid" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
        backendXmin: identifier alias "backend_xmin" (Sql.Types.nullable Sql.Types.i32),
        backendXid: identifier alias "backend_xid" (Sql.Types.nullable Sql.Types.i32),
        clientAddr: identifier alias "client_addr" (Sql.Types.nullable (Sql.Types.unsupported "inet")),
        stateChange: identifier alias "state_change" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        queryStart: identifier alias "query_start" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        xactStart: identifier alias "xact_start" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        backendStart: identifier alias "backend_start" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgReplicationOriginStatus = {
    schema: "pg_catalog",
    name: "pg_replication_origin_status",
    alias: "pros",
    columns: |alias| {
        externalId: identifier alias "external_id" (Sql.Types.nullable Sql.Types.str),
        localId: identifier alias "local_id" (Sql.Types.nullable Sql.Types.i32),
        localLsn: identifier alias "local_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        remoteLsn: identifier alias "remote_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
    },
}

pgSubscriptionOid : Sql.Types.Decode (Sql.Types.PgI32 { pgSubscriptionOid : {} }) I32
pgSubscriptionOid = Sql.Types.i32

pgSubscription = {
    schema: "pg_catalog",
    name: "pg_subscription",
    alias: "ps",
    columns: |alias| {
        subdisableonerr: identifier alias "subdisableonerr" Sql.Types.bool,
        substream: identifier alias "substream" Sql.Types.bool,
        subbinary: identifier alias "subbinary" Sql.Types.bool,
        subenabled: identifier alias "subenabled" Sql.Types.bool,
        subtwophasestate: identifier alias "subtwophasestate" Sql.Types.str,
        subslotname: identifier alias "subslotname" (Sql.Types.nullable Sql.Types.str),
        subname: identifier alias "subname" Sql.Types.str,
        subsynccommit: identifier alias "subsynccommit" Sql.Types.str,
        subconninfo: identifier alias "subconninfo" Sql.Types.str,
        subowner: identifier alias "subowner" Sql.Types.i32,
        subdbid: identifier alias "subdbid" Sql.Types.i32,
        oid: identifier alias "oid" pgSubscriptionOid,
        subskiplsn: identifier alias "subskiplsn" (Sql.Types.unsupported "pg_lsn"),
        subpublications: identifier alias "subpublications" (Sql.Types.array (Sql.Types.nullable Sql.Types.str)),
    },
}

pgAttributeAttnum : Sql.Types.Decode (Sql.Types.PgI16 { pgAttributeAttnum : {} }) I16
pgAttributeAttnum = Sql.Types.i16

pgAttributeAttrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgAttributeAttrelid : {} }) I32
pgAttributeAttrelid = Sql.Types.i32

pgAttribute = {
    schema: "pg_catalog",
    name: "pg_attribute",
    alias: "pa",
    columns: |alias| {
        attislocal: identifier alias "attislocal" Sql.Types.bool,
        attisdropped: identifier alias "attisdropped" Sql.Types.bool,
        atthasmissing: identifier alias "atthasmissing" Sql.Types.bool,
        atthasdef: identifier alias "atthasdef" Sql.Types.bool,
        attnotnull: identifier alias "attnotnull" Sql.Types.bool,
        attbyval: identifier alias "attbyval" Sql.Types.bool,
        attgenerated: identifier alias "attgenerated" Sql.Types.str,
        attidentity: identifier alias "attidentity" Sql.Types.str,
        attcompression: identifier alias "attcompression" Sql.Types.str,
        attstorage: identifier alias "attstorage" Sql.Types.str,
        attalign: identifier alias "attalign" Sql.Types.str,
        attname: identifier alias "attname" Sql.Types.str,
        attnum: identifier alias "attnum" pgAttributeAttnum,
        attlen: identifier alias "attlen" Sql.Types.i16,
        attinhcount: identifier alias "attinhcount" Sql.Types.i32,
        atttypmod: identifier alias "atttypmod" Sql.Types.i32,
        attcacheoff: identifier alias "attcacheoff" Sql.Types.i32,
        attndims: identifier alias "attndims" Sql.Types.i32,
        attstattarget: identifier alias "attstattarget" Sql.Types.i32,
        attcollation: identifier alias "attcollation" Sql.Types.i32,
        atttypid: identifier alias "atttypid" Sql.Types.i32,
        attrelid: identifier alias "attrelid" pgAttributeAttrelid,
        attmissingval: identifier alias "attmissingval" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        attfdwoptions: identifier alias "attfdwoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        attoptions: identifier alias "attoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        attacl: identifier alias "attacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgProcOid : Sql.Types.Decode (Sql.Types.PgI32 { pgProcOid : {} }) I32
pgProcOid = Sql.Types.i32

pgProc = {
    schema: "pg_catalog",
    name: "pg_proc",
    alias: "pp",
    columns: |alias| {
        proretset: identifier alias "proretset" Sql.Types.bool,
        proisstrict: identifier alias "proisstrict" Sql.Types.bool,
        proleakproof: identifier alias "proleakproof" Sql.Types.bool,
        prosecdef: identifier alias "prosecdef" Sql.Types.bool,
        proparallel: identifier alias "proparallel" Sql.Types.str,
        provolatile: identifier alias "provolatile" Sql.Types.str,
        prokind: identifier alias "prokind" Sql.Types.str,
        proname: identifier alias "proname" Sql.Types.str,
        pronargdefaults: identifier alias "pronargdefaults" Sql.Types.i16,
        pronargs: identifier alias "pronargs" Sql.Types.i16,
        prosupport: identifier alias "prosupport" (Sql.Types.unsupported "regproc"),
        probin: identifier alias "probin" (Sql.Types.nullable Sql.Types.str),
        prosrc: identifier alias "prosrc" Sql.Types.str,
        prorettype: identifier alias "prorettype" Sql.Types.i32,
        provariadic: identifier alias "provariadic" Sql.Types.i32,
        prolang: identifier alias "prolang" Sql.Types.i32,
        proowner: identifier alias "proowner" Sql.Types.i32,
        pronamespace: identifier alias "pronamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgProcOid,
        proargtypes: identifier alias "proargtypes" (Sql.Types.array (Sql.Types.nullable Sql.Types.i32)),
        prosqlbody: identifier alias "prosqlbody" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        proargdefaults: identifier alias "proargdefaults" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        prorows: identifier alias "prorows" Sql.Types.f32,
        procost: identifier alias "procost" Sql.Types.f32,
        proargmodes: identifier alias "proargmodes" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        proconfig: identifier alias "proconfig" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        proargnames: identifier alias "proargnames" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        protrftypes: identifier alias "protrftypes" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
        proallargtypes: identifier alias "proallargtypes" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
        proacl: identifier alias "proacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgClassOid : Sql.Types.Decode (Sql.Types.PgI32 { pgClassOid : {} }) I32
pgClassOid = Sql.Types.i32

pgClass = {
    schema: "pg_catalog",
    name: "pg_class",
    alias: "pc",
    columns: |alias| {
        relispartition: identifier alias "relispartition" Sql.Types.bool,
        relispopulated: identifier alias "relispopulated" Sql.Types.bool,
        relforcerowsecurity: identifier alias "relforcerowsecurity" Sql.Types.bool,
        relrowsecurity: identifier alias "relrowsecurity" Sql.Types.bool,
        relhassubclass: identifier alias "relhassubclass" Sql.Types.bool,
        relhastriggers: identifier alias "relhastriggers" Sql.Types.bool,
        relhasrules: identifier alias "relhasrules" Sql.Types.bool,
        relisshared: identifier alias "relisshared" Sql.Types.bool,
        relhasindex: identifier alias "relhasindex" Sql.Types.bool,
        relreplident: identifier alias "relreplident" Sql.Types.str,
        relkind: identifier alias "relkind" Sql.Types.str,
        relpersistence: identifier alias "relpersistence" Sql.Types.str,
        relname: identifier alias "relname" Sql.Types.str,
        relchecks: identifier alias "relchecks" Sql.Types.i16,
        relnatts: identifier alias "relnatts" Sql.Types.i16,
        relallvisible: identifier alias "relallvisible" Sql.Types.i32,
        relpages: identifier alias "relpages" Sql.Types.i32,
        relrewrite: identifier alias "relrewrite" Sql.Types.i32,
        reltoastrelid: identifier alias "reltoastrelid" Sql.Types.i32,
        reltablespace: identifier alias "reltablespace" Sql.Types.i32,
        relfilenode: identifier alias "relfilenode" Sql.Types.i32,
        relam: identifier alias "relam" Sql.Types.i32,
        relowner: identifier alias "relowner" Sql.Types.i32,
        reloftype: identifier alias "reloftype" Sql.Types.i32,
        reltype: identifier alias "reltype" Sql.Types.i32,
        relnamespace: identifier alias "relnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgClassOid,
        relminmxid: identifier alias "relminmxid" Sql.Types.i32,
        relfrozenxid: identifier alias "relfrozenxid" Sql.Types.i32,
        relpartbound: identifier alias "relpartbound" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        reltuples: identifier alias "reltuples" Sql.Types.f32,
        reloptions: identifier alias "reloptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        relacl: identifier alias "relacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgAttrdefOid : Sql.Types.Decode (Sql.Types.PgI32 { pgAttrdefOid : {} }) I32
pgAttrdefOid = Sql.Types.i32

pgAttrdef = {
    schema: "pg_catalog",
    name: "pg_attrdef",
    alias: "pa",
    columns: |alias| {
        adnum: identifier alias "adnum" Sql.Types.i16,
        adrelid: identifier alias "adrelid" Sql.Types.i32,
        oid: identifier alias "oid" pgAttrdefOid,
        adbin: identifier alias "adbin" (Sql.Types.unsupported "pg_node_tree"),
    },
}

pgConstraintOid : Sql.Types.Decode (Sql.Types.PgI32 { pgConstraintOid : {} }) I32
pgConstraintOid = Sql.Types.i32

pgConstraint = {
    schema: "pg_catalog",
    name: "pg_constraint",
    alias: "pc",
    columns: |alias| {
        connoinherit: identifier alias "connoinherit" Sql.Types.bool,
        conislocal: identifier alias "conislocal" Sql.Types.bool,
        convalidated: identifier alias "convalidated" Sql.Types.bool,
        condeferred: identifier alias "condeferred" Sql.Types.bool,
        condeferrable: identifier alias "condeferrable" Sql.Types.bool,
        confmatchtype: identifier alias "confmatchtype" Sql.Types.str,
        confdeltype: identifier alias "confdeltype" Sql.Types.str,
        confupdtype: identifier alias "confupdtype" Sql.Types.str,
        contype: identifier alias "contype" Sql.Types.str,
        conname: identifier alias "conname" Sql.Types.str,
        coninhcount: identifier alias "coninhcount" Sql.Types.i32,
        confrelid: identifier alias "confrelid" Sql.Types.i32,
        conparentid: identifier alias "conparentid" Sql.Types.i32,
        conindid: identifier alias "conindid" Sql.Types.i32,
        contypid: identifier alias "contypid" Sql.Types.i32,
        conrelid: identifier alias "conrelid" Sql.Types.i32,
        connamespace: identifier alias "connamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgConstraintOid,
        conbin: identifier alias "conbin" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        confdelsetcols: identifier alias "confdelsetcols" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i16))),
        confkey: identifier alias "confkey" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i16))),
        conkey: identifier alias "conkey" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i16))),
        conexclop: identifier alias "conexclop" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
        conffeqop: identifier alias "conffeqop" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
        conppeqop: identifier alias "conppeqop" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
        conpfeqop: identifier alias "conpfeqop" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
    },
}

pgInheritsInhseqno : Sql.Types.Decode (Sql.Types.PgI32 { pgInheritsInhseqno : {} }) I32
pgInheritsInhseqno = Sql.Types.i32

pgInheritsInhrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgInheritsInhrelid : {} }) I32
pgInheritsInhrelid = Sql.Types.i32

pgInherits = {
    schema: "pg_catalog",
    name: "pg_inherits",
    alias: "pi",
    columns: |alias| {
        inhdetachpending: identifier alias "inhdetachpending" Sql.Types.bool,
        inhseqno: identifier alias "inhseqno" pgInheritsInhseqno,
        inhparent: identifier alias "inhparent" Sql.Types.i32,
        inhrelid: identifier alias "inhrelid" pgInheritsInhrelid,
    },
}

pgIndexIndexrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgIndexIndexrelid : {} }) I32
pgIndexIndexrelid = Sql.Types.i32

pgIndex = {
    schema: "pg_catalog",
    name: "pg_index",
    alias: "pi",
    columns: |alias| {
        indisreplident: identifier alias "indisreplident" Sql.Types.bool,
        indislive: identifier alias "indislive" Sql.Types.bool,
        indisready: identifier alias "indisready" Sql.Types.bool,
        indcheckxmin: identifier alias "indcheckxmin" Sql.Types.bool,
        indisvalid: identifier alias "indisvalid" Sql.Types.bool,
        indisclustered: identifier alias "indisclustered" Sql.Types.bool,
        indimmediate: identifier alias "indimmediate" Sql.Types.bool,
        indisexclusion: identifier alias "indisexclusion" Sql.Types.bool,
        indisprimary: identifier alias "indisprimary" Sql.Types.bool,
        indnullsnotdistinct: identifier alias "indnullsnotdistinct" Sql.Types.bool,
        indisunique: identifier alias "indisunique" Sql.Types.bool,
        indnkeyatts: identifier alias "indnkeyatts" Sql.Types.i16,
        indnatts: identifier alias "indnatts" Sql.Types.i16,
        indoption: identifier alias "indoption" (Sql.Types.array (Sql.Types.nullable Sql.Types.i16)),
        indkey: identifier alias "indkey" (Sql.Types.array (Sql.Types.nullable Sql.Types.i16)),
        indrelid: identifier alias "indrelid" Sql.Types.i32,
        indexrelid: identifier alias "indexrelid" pgIndexIndexrelid,
        indclass: identifier alias "indclass" (Sql.Types.array (Sql.Types.nullable Sql.Types.i32)),
        indcollation: identifier alias "indcollation" (Sql.Types.array (Sql.Types.nullable Sql.Types.i32)),
        indpred: identifier alias "indpred" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        indexprs: identifier alias "indexprs" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
    },
}

pgStatReplication = {
    schema: "pg_catalog",
    name: "pg_stat_replication",
    alias: "psr",
    columns: |alias| {
        usename: identifier alias "usename" (Sql.Types.nullable Sql.Types.str),
        syncPriority: identifier alias "sync_priority" (Sql.Types.nullable Sql.Types.i32),
        clientPort: identifier alias "client_port" (Sql.Types.nullable Sql.Types.i32),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        syncState: identifier alias "sync_state" (Sql.Types.nullable Sql.Types.str),
        state: identifier alias "state" (Sql.Types.nullable Sql.Types.str),
        clientHostname: identifier alias "client_hostname" (Sql.Types.nullable Sql.Types.str),
        applicationName: identifier alias "application_name" (Sql.Types.nullable Sql.Types.str),
        usesysid: identifier alias "usesysid" (Sql.Types.nullable Sql.Types.i32),
        backendXmin: identifier alias "backend_xmin" (Sql.Types.nullable Sql.Types.i32),
        clientAddr: identifier alias "client_addr" (Sql.Types.nullable (Sql.Types.unsupported "inet")),
        replyTime: identifier alias "reply_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        backendStart: identifier alias "backend_start" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        replayLag: identifier alias "replay_lag" (Sql.Types.nullable (Sql.Types.unsupported "interval")),
        flushLag: identifier alias "flush_lag" (Sql.Types.nullable (Sql.Types.unsupported "interval")),
        writeLag: identifier alias "write_lag" (Sql.Types.nullable (Sql.Types.unsupported "interval")),
        replayLsn: identifier alias "replay_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        flushLsn: identifier alias "flush_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        writeLsn: identifier alias "write_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        sentLsn: identifier alias "sent_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
    },
}

pgStatSlru = {
    schema: "pg_catalog",
    name: "pg_stat_slru",
    alias: "pss",
    columns: |alias| {
        truncates: identifier alias "truncates" (Sql.Types.nullable Sql.Types.i64),
        flushes: identifier alias "flushes" (Sql.Types.nullable Sql.Types.i64),
        blksExists: identifier alias "blks_exists" (Sql.Types.nullable Sql.Types.i64),
        blksWritten: identifier alias "blks_written" (Sql.Types.nullable Sql.Types.i64),
        blksRead: identifier alias "blks_read" (Sql.Types.nullable Sql.Types.i64),
        blksHit: identifier alias "blks_hit" (Sql.Types.nullable Sql.Types.i64),
        blksZeroed: identifier alias "blks_zeroed" (Sql.Types.nullable Sql.Types.i64),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatWalReceiver = {
    schema: "pg_catalog",
    name: "pg_stat_wal_receiver",
    alias: "pswr",
    columns: |alias| {
        senderPort: identifier alias "sender_port" (Sql.Types.nullable Sql.Types.i32),
        receivedTli: identifier alias "received_tli" (Sql.Types.nullable Sql.Types.i32),
        receiveStartTli: identifier alias "receive_start_tli" (Sql.Types.nullable Sql.Types.i32),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        conninfo: identifier alias "conninfo" (Sql.Types.nullable Sql.Types.str),
        senderHost: identifier alias "sender_host" (Sql.Types.nullable Sql.Types.str),
        slotName: identifier alias "slot_name" (Sql.Types.nullable Sql.Types.str),
        status: identifier alias "status" (Sql.Types.nullable Sql.Types.str),
        latestEndTime: identifier alias "latest_end_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastMsgReceiptTime: identifier alias "last_msg_receipt_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastMsgSendTime: identifier alias "last_msg_send_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        latestEndLsn: identifier alias "latest_end_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        flushedLsn: identifier alias "flushed_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        writtenLsn: identifier alias "written_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        receiveStartLsn: identifier alias "receive_start_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
    },
}

pgStatRecoveryPrefetch = {
    schema: "pg_catalog",
    name: "pg_stat_recovery_prefetch",
    alias: "psrp",
    columns: |alias| {
        skipRep: identifier alias "skip_rep" (Sql.Types.nullable Sql.Types.i64),
        skipFpw: identifier alias "skip_fpw" (Sql.Types.nullable Sql.Types.i64),
        skipNew: identifier alias "skip_new" (Sql.Types.nullable Sql.Types.i64),
        skipInit: identifier alias "skip_init" (Sql.Types.nullable Sql.Types.i64),
        hit: identifier alias "hit" (Sql.Types.nullable Sql.Types.i64),
        prefetch: identifier alias "prefetch" (Sql.Types.nullable Sql.Types.i64),
        ioDepth: identifier alias "io_depth" (Sql.Types.nullable Sql.Types.i32),
        blockDistance: identifier alias "block_distance" (Sql.Types.nullable Sql.Types.i32),
        walDistance: identifier alias "wal_distance" (Sql.Types.nullable Sql.Types.i32),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgOperatorOid : Sql.Types.Decode (Sql.Types.PgI32 { pgOperatorOid : {} }) I32
pgOperatorOid = Sql.Types.i32

pgOperator = {
    schema: "pg_catalog",
    name: "pg_operator",
    alias: "po",
    columns: |alias| {
        oprcanhash: identifier alias "oprcanhash" Sql.Types.bool,
        oprcanmerge: identifier alias "oprcanmerge" Sql.Types.bool,
        oprkind: identifier alias "oprkind" Sql.Types.str,
        oprname: identifier alias "oprname" Sql.Types.str,
        oprjoin: identifier alias "oprjoin" (Sql.Types.unsupported "regproc"),
        oprrest: identifier alias "oprrest" (Sql.Types.unsupported "regproc"),
        oprcode: identifier alias "oprcode" (Sql.Types.unsupported "regproc"),
        oprnegate: identifier alias "oprnegate" Sql.Types.i32,
        oprcom: identifier alias "oprcom" Sql.Types.i32,
        oprresult: identifier alias "oprresult" Sql.Types.i32,
        oprright: identifier alias "oprright" Sql.Types.i32,
        oprleft: identifier alias "oprleft" Sql.Types.i32,
        oprowner: identifier alias "oprowner" Sql.Types.i32,
        oprnamespace: identifier alias "oprnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgOperatorOid,
    },
}

pgOpfamilyOid : Sql.Types.Decode (Sql.Types.PgI32 { pgOpfamilyOid : {} }) I32
pgOpfamilyOid = Sql.Types.i32

pgOpfamily = {
    schema: "pg_catalog",
    name: "pg_opfamily",
    alias: "po",
    columns: |alias| {
        opfname: identifier alias "opfname" Sql.Types.str,
        opfowner: identifier alias "opfowner" Sql.Types.i32,
        opfnamespace: identifier alias "opfnamespace" Sql.Types.i32,
        opfmethod: identifier alias "opfmethod" Sql.Types.i32,
        oid: identifier alias "oid" pgOpfamilyOid,
    },
}

pgOpclassOid : Sql.Types.Decode (Sql.Types.PgI32 { pgOpclassOid : {} }) I32
pgOpclassOid = Sql.Types.i32

pgOpclass = {
    schema: "pg_catalog",
    name: "pg_opclass",
    alias: "po",
    columns: |alias| {
        opcdefault: identifier alias "opcdefault" Sql.Types.bool,
        opcname: identifier alias "opcname" Sql.Types.str,
        opckeytype: identifier alias "opckeytype" Sql.Types.i32,
        opcintype: identifier alias "opcintype" Sql.Types.i32,
        opcfamily: identifier alias "opcfamily" Sql.Types.i32,
        opcowner: identifier alias "opcowner" Sql.Types.i32,
        opcnamespace: identifier alias "opcnamespace" Sql.Types.i32,
        opcmethod: identifier alias "opcmethod" Sql.Types.i32,
        oid: identifier alias "oid" pgOpclassOid,
    },
}

pgAmOid : Sql.Types.Decode (Sql.Types.PgI32 { pgAmOid : {} }) I32
pgAmOid = Sql.Types.i32

pgAm = {
    schema: "pg_catalog",
    name: "pg_am",
    alias: "pa",
    columns: |alias| {
        amtype: identifier alias "amtype" Sql.Types.str,
        amname: identifier alias "amname" Sql.Types.str,
        amhandler: identifier alias "amhandler" (Sql.Types.unsupported "regproc"),
        oid: identifier alias "oid" pgAmOid,
    },
}

pgAmopOid : Sql.Types.Decode (Sql.Types.PgI32 { pgAmopOid : {} }) I32
pgAmopOid = Sql.Types.i32

pgAmop = {
    schema: "pg_catalog",
    name: "pg_amop",
    alias: "pa",
    columns: |alias| {
        amoppurpose: identifier alias "amoppurpose" Sql.Types.str,
        amopstrategy: identifier alias "amopstrategy" Sql.Types.i16,
        amopsortfamily: identifier alias "amopsortfamily" Sql.Types.i32,
        amopmethod: identifier alias "amopmethod" Sql.Types.i32,
        amopopr: identifier alias "amopopr" Sql.Types.i32,
        amoprighttype: identifier alias "amoprighttype" Sql.Types.i32,
        amoplefttype: identifier alias "amoplefttype" Sql.Types.i32,
        amopfamily: identifier alias "amopfamily" Sql.Types.i32,
        oid: identifier alias "oid" pgAmopOid,
    },
}

pgAmprocOid : Sql.Types.Decode (Sql.Types.PgI32 { pgAmprocOid : {} }) I32
pgAmprocOid = Sql.Types.i32

pgAmproc = {
    schema: "pg_catalog",
    name: "pg_amproc",
    alias: "pa",
    columns: |alias| {
        amprocnum: identifier alias "amprocnum" Sql.Types.i16,
        amproc: identifier alias "amproc" (Sql.Types.unsupported "regproc"),
        amprocrighttype: identifier alias "amprocrighttype" Sql.Types.i32,
        amproclefttype: identifier alias "amproclefttype" Sql.Types.i32,
        amprocfamily: identifier alias "amprocfamily" Sql.Types.i32,
        oid: identifier alias "oid" pgAmprocOid,
    },
}

pgLanguageOid : Sql.Types.Decode (Sql.Types.PgI32 { pgLanguageOid : {} }) I32
pgLanguageOid = Sql.Types.i32

pgLanguage = {
    schema: "pg_catalog",
    name: "pg_language",
    alias: "pl",
    columns: |alias| {
        lanpltrusted: identifier alias "lanpltrusted" Sql.Types.bool,
        lanispl: identifier alias "lanispl" Sql.Types.bool,
        lanname: identifier alias "lanname" Sql.Types.str,
        lanvalidator: identifier alias "lanvalidator" Sql.Types.i32,
        laninline: identifier alias "laninline" Sql.Types.i32,
        lanplcallfoid: identifier alias "lanplcallfoid" Sql.Types.i32,
        lanowner: identifier alias "lanowner" Sql.Types.i32,
        oid: identifier alias "oid" pgLanguageOid,
        lanacl: identifier alias "lanacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgLargeobjectMetadataOid : Sql.Types.Decode (Sql.Types.PgI32 { pgLargeobjectMetadataOid : {} }) I32
pgLargeobjectMetadataOid = Sql.Types.i32

pgLargeobjectMetadata = {
    schema: "pg_catalog",
    name: "pg_largeobject_metadata",
    alias: "plm",
    columns: |alias| {
        lomowner: identifier alias "lomowner" Sql.Types.i32,
        oid: identifier alias "oid" pgLargeobjectMetadataOid,
        lomacl: identifier alias "lomacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgAggregateAggfnoid : Sql.Types.Decode { pgAggregateAggfnoid : {} } Sql.Types.Raw
pgAggregateAggfnoid = Sql.Types.unsupported "regproc"

pgAggregate = {
    schema: "pg_catalog",
    name: "pg_aggregate",
    alias: "pa",
    columns: |alias| {
        aggmfinalextra: identifier alias "aggmfinalextra" Sql.Types.bool,
        aggfinalextra: identifier alias "aggfinalextra" Sql.Types.bool,
        aggmfinalmodify: identifier alias "aggmfinalmodify" Sql.Types.str,
        aggfinalmodify: identifier alias "aggfinalmodify" Sql.Types.str,
        aggkind: identifier alias "aggkind" Sql.Types.str,
        aggnumdirectargs: identifier alias "aggnumdirectargs" Sql.Types.i16,
        aggmtransspace: identifier alias "aggmtransspace" Sql.Types.i32,
        aggtransspace: identifier alias "aggtransspace" Sql.Types.i32,
        aggmfinalfn: identifier alias "aggmfinalfn" (Sql.Types.unsupported "regproc"),
        aggminvtransfn: identifier alias "aggminvtransfn" (Sql.Types.unsupported "regproc"),
        aggmtransfn: identifier alias "aggmtransfn" (Sql.Types.unsupported "regproc"),
        aggdeserialfn: identifier alias "aggdeserialfn" (Sql.Types.unsupported "regproc"),
        aggserialfn: identifier alias "aggserialfn" (Sql.Types.unsupported "regproc"),
        aggcombinefn: identifier alias "aggcombinefn" (Sql.Types.unsupported "regproc"),
        aggfinalfn: identifier alias "aggfinalfn" (Sql.Types.unsupported "regproc"),
        aggtransfn: identifier alias "aggtransfn" (Sql.Types.unsupported "regproc"),
        aggfnoid: identifier alias "aggfnoid" pgAggregateAggfnoid,
        aggminitval: identifier alias "aggminitval" (Sql.Types.nullable Sql.Types.str),
        agginitval: identifier alias "agginitval" (Sql.Types.nullable Sql.Types.str),
        aggmtranstype: identifier alias "aggmtranstype" Sql.Types.i32,
        aggtranstype: identifier alias "aggtranstype" Sql.Types.i32,
        aggsortop: identifier alias "aggsortop" Sql.Types.i32,
    },
}

pgStatisticExtOid : Sql.Types.Decode (Sql.Types.PgI32 { pgStatisticExtOid : {} }) I32
pgStatisticExtOid = Sql.Types.i32

pgStatisticExt = {
    schema: "pg_catalog",
    name: "pg_statistic_ext",
    alias: "pse",
    columns: |alias| {
        stxname: identifier alias "stxname" Sql.Types.str,
        stxkeys: identifier alias "stxkeys" (Sql.Types.array (Sql.Types.nullable Sql.Types.i16)),
        stxstattarget: identifier alias "stxstattarget" Sql.Types.i32,
        stxowner: identifier alias "stxowner" Sql.Types.i32,
        stxnamespace: identifier alias "stxnamespace" Sql.Types.i32,
        stxrelid: identifier alias "stxrelid" Sql.Types.i32,
        oid: identifier alias "oid" pgStatisticExtOid,
        stxexprs: identifier alias "stxexprs" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        stxkind: identifier alias "stxkind" (Sql.Types.array (Sql.Types.nullable Sql.Types.str)),
    },
}

pgRewriteOid : Sql.Types.Decode (Sql.Types.PgI32 { pgRewriteOid : {} }) I32
pgRewriteOid = Sql.Types.i32

pgRewrite = {
    schema: "pg_catalog",
    name: "pg_rewrite",
    alias: "pr",
    columns: |alias| {
        isInstead: identifier alias "is_instead" Sql.Types.bool,
        evEnabled: identifier alias "ev_enabled" Sql.Types.str,
        evType: identifier alias "ev_type" Sql.Types.str,
        rulename: identifier alias "rulename" Sql.Types.str,
        evClass: identifier alias "ev_class" Sql.Types.i32,
        oid: identifier alias "oid" pgRewriteOid,
        evAction: identifier alias "ev_action" (Sql.Types.unsupported "pg_node_tree"),
        evQual: identifier alias "ev_qual" (Sql.Types.unsupported "pg_node_tree"),
    },
}

pgTriggerOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTriggerOid : {} }) I32
pgTriggerOid = Sql.Types.i32

pgTrigger = {
    schema: "pg_catalog",
    name: "pg_trigger",
    alias: "pt",
    columns: |alias| {
        tginitdeferred: identifier alias "tginitdeferred" Sql.Types.bool,
        tgdeferrable: identifier alias "tgdeferrable" Sql.Types.bool,
        tgisinternal: identifier alias "tgisinternal" Sql.Types.bool,
        tgargs: identifier alias "tgargs" (Sql.Types.unsupported "bytea"),
        tgenabled: identifier alias "tgenabled" Sql.Types.str,
        tgnewtable: identifier alias "tgnewtable" (Sql.Types.nullable Sql.Types.str),
        tgoldtable: identifier alias "tgoldtable" (Sql.Types.nullable Sql.Types.str),
        tgname: identifier alias "tgname" Sql.Types.str,
        tgnargs: identifier alias "tgnargs" Sql.Types.i16,
        tgtype: identifier alias "tgtype" Sql.Types.i16,
        tgattr: identifier alias "tgattr" (Sql.Types.array (Sql.Types.nullable Sql.Types.i16)),
        tgconstraint: identifier alias "tgconstraint" Sql.Types.i32,
        tgconstrindid: identifier alias "tgconstrindid" Sql.Types.i32,
        tgconstrrelid: identifier alias "tgconstrrelid" Sql.Types.i32,
        tgfoid: identifier alias "tgfoid" Sql.Types.i32,
        tgparentid: identifier alias "tgparentid" Sql.Types.i32,
        tgrelid: identifier alias "tgrelid" Sql.Types.i32,
        oid: identifier alias "oid" pgTriggerOid,
        tgqual: identifier alias "tgqual" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
    },
}

pgEventTriggerOid : Sql.Types.Decode (Sql.Types.PgI32 { pgEventTriggerOid : {} }) I32
pgEventTriggerOid = Sql.Types.i32

pgEventTrigger = {
    schema: "pg_catalog",
    name: "pg_event_trigger",
    alias: "pet",
    columns: |alias| {
        evtenabled: identifier alias "evtenabled" Sql.Types.str,
        evtevent: identifier alias "evtevent" Sql.Types.str,
        evtname: identifier alias "evtname" Sql.Types.str,
        evtfoid: identifier alias "evtfoid" Sql.Types.i32,
        evtowner: identifier alias "evtowner" Sql.Types.i32,
        oid: identifier alias "oid" pgEventTriggerOid,
        evttags: identifier alias "evttags" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgDescriptionObjsubid : Sql.Types.Decode (Sql.Types.PgI32 { pgDescriptionObjsubid : {} }) I32
pgDescriptionObjsubid = Sql.Types.i32

pgDescriptionClassoid : Sql.Types.Decode (Sql.Types.PgI32 { pgDescriptionClassoid : {} }) I32
pgDescriptionClassoid = Sql.Types.i32

pgDescriptionObjoid : Sql.Types.Decode (Sql.Types.PgI32 { pgDescriptionObjoid : {} }) I32
pgDescriptionObjoid = Sql.Types.i32

pgDescription = {
    schema: "pg_catalog",
    name: "pg_description",
    alias: "pd",
    columns: |alias| {
        objsubid: identifier alias "objsubid" pgDescriptionObjsubid,
        description: identifier alias "description" Sql.Types.str,
        classoid: identifier alias "classoid" pgDescriptionClassoid,
        objoid: identifier alias "objoid" pgDescriptionObjoid,
    },
}

pgCastOid : Sql.Types.Decode (Sql.Types.PgI32 { pgCastOid : {} }) I32
pgCastOid = Sql.Types.i32

pgCast = {
    schema: "pg_catalog",
    name: "pg_cast",
    alias: "pc",
    columns: |alias| {
        castmethod: identifier alias "castmethod" Sql.Types.str,
        castcontext: identifier alias "castcontext" Sql.Types.str,
        castfunc: identifier alias "castfunc" Sql.Types.i32,
        casttarget: identifier alias "casttarget" Sql.Types.i32,
        castsource: identifier alias "castsource" Sql.Types.i32,
        oid: identifier alias "oid" pgCastOid,
    },
}

pgEnumOid : Sql.Types.Decode (Sql.Types.PgI32 { pgEnumOid : {} }) I32
pgEnumOid = Sql.Types.i32

pgEnum = {
    schema: "pg_catalog",
    name: "pg_enum",
    alias: "pe",
    columns: |alias| {
        enumlabel: identifier alias "enumlabel" Sql.Types.str,
        enumtypid: identifier alias "enumtypid" Sql.Types.i32,
        oid: identifier alias "oid" pgEnumOid,
        enumsortorder: identifier alias "enumsortorder" Sql.Types.f32,
    },
}

pgNamespaceOid : Sql.Types.Decode (Sql.Types.PgI32 { pgNamespaceOid : {} }) I32
pgNamespaceOid = Sql.Types.i32

pgNamespace = {
    schema: "pg_catalog",
    name: "pg_namespace",
    alias: "pn",
    columns: |alias| {
        nspname: identifier alias "nspname" Sql.Types.str,
        nspowner: identifier alias "nspowner" Sql.Types.i32,
        oid: identifier alias "oid" pgNamespaceOid,
        nspacl: identifier alias "nspacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgConversionOid : Sql.Types.Decode (Sql.Types.PgI32 { pgConversionOid : {} }) I32
pgConversionOid = Sql.Types.i32

pgConversion = {
    schema: "pg_catalog",
    name: "pg_conversion",
    alias: "pc",
    columns: |alias| {
        condefault: identifier alias "condefault" Sql.Types.bool,
        conname: identifier alias "conname" Sql.Types.str,
        contoencoding: identifier alias "contoencoding" Sql.Types.i32,
        conforencoding: identifier alias "conforencoding" Sql.Types.i32,
        conproc: identifier alias "conproc" (Sql.Types.unsupported "regproc"),
        conowner: identifier alias "conowner" Sql.Types.i32,
        connamespace: identifier alias "connamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgConversionOid,
    },
}

pgDepend = {
    schema: "pg_catalog",
    name: "pg_depend",
    alias: "pd",
    columns: |alias| {
        deptype: identifier alias "deptype" Sql.Types.str,
        refobjsubid: identifier alias "refobjsubid" Sql.Types.i32,
        objsubid: identifier alias "objsubid" Sql.Types.i32,
        refobjid: identifier alias "refobjid" Sql.Types.i32,
        refclassid: identifier alias "refclassid" Sql.Types.i32,
        objid: identifier alias "objid" Sql.Types.i32,
        classid: identifier alias "classid" Sql.Types.i32,
    },
}

pgDatabaseOid : Sql.Types.Decode (Sql.Types.PgI32 { pgDatabaseOid : {} }) I32
pgDatabaseOid = Sql.Types.i32

pgDatabase = {
    schema: "pg_catalog",
    name: "pg_database",
    alias: "pd",
    columns: |alias| {
        datallowconn: identifier alias "datallowconn" Sql.Types.bool,
        datistemplate: identifier alias "datistemplate" Sql.Types.bool,
        datlocprovider: identifier alias "datlocprovider" Sql.Types.str,
        datname: identifier alias "datname" Sql.Types.str,
        datconnlimit: identifier alias "datconnlimit" Sql.Types.i32,
        encoding: identifier alias "encoding" Sql.Types.i32,
        datcollversion: identifier alias "datcollversion" (Sql.Types.nullable Sql.Types.str),
        daticulocale: identifier alias "daticulocale" (Sql.Types.nullable Sql.Types.str),
        datctype: identifier alias "datctype" Sql.Types.str,
        datcollate: identifier alias "datcollate" Sql.Types.str,
        dattablespace: identifier alias "dattablespace" Sql.Types.i32,
        datdba: identifier alias "datdba" Sql.Types.i32,
        oid: identifier alias "oid" pgDatabaseOid,
        datminmxid: identifier alias "datminmxid" Sql.Types.i32,
        datfrozenxid: identifier alias "datfrozenxid" Sql.Types.i32,
        datacl: identifier alias "datacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgDbRoleSettingSetrole : Sql.Types.Decode (Sql.Types.PgI32 { pgDbRoleSettingSetrole : {} }) I32
pgDbRoleSettingSetrole = Sql.Types.i32

pgDbRoleSettingSetdatabase : Sql.Types.Decode (Sql.Types.PgI32 { pgDbRoleSettingSetdatabase : {} }) I32
pgDbRoleSettingSetdatabase = Sql.Types.i32

pgDbRoleSetting = {
    schema: "pg_catalog",
    name: "pg_db_role_setting",
    alias: "pdrs",
    columns: |alias| {
        setrole: identifier alias "setrole" pgDbRoleSettingSetrole,
        setdatabase: identifier alias "setdatabase" pgDbRoleSettingSetdatabase,
        setconfig: identifier alias "setconfig" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgTablespaceOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTablespaceOid : {} }) I32
pgTablespaceOid = Sql.Types.i32

pgTablespace = {
    schema: "pg_catalog",
    name: "pg_tablespace",
    alias: "pt",
    columns: |alias| {
        spcname: identifier alias "spcname" Sql.Types.str,
        spcowner: identifier alias "spcowner" Sql.Types.i32,
        oid: identifier alias "oid" pgTablespaceOid,
        spcoptions: identifier alias "spcoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        spcacl: identifier alias "spcacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgAuthMembersMember : Sql.Types.Decode (Sql.Types.PgI32 { pgAuthMembersMember : {} }) I32
pgAuthMembersMember = Sql.Types.i32

pgAuthMembersRoleid : Sql.Types.Decode (Sql.Types.PgI32 { pgAuthMembersRoleid : {} }) I32
pgAuthMembersRoleid = Sql.Types.i32

pgAuthMembers = {
    schema: "pg_catalog",
    name: "pg_auth_members",
    alias: "pam",
    columns: |alias| {
        adminOption: identifier alias "admin_option" Sql.Types.bool,
        grantor: identifier alias "grantor" Sql.Types.i32,
        member: identifier alias "member" pgAuthMembersMember,
        roleid: identifier alias "roleid" pgAuthMembersRoleid,
    },
}

pgShdepend = {
    schema: "pg_catalog",
    name: "pg_shdepend",
    alias: "ps",
    columns: |alias| {
        deptype: identifier alias "deptype" Sql.Types.str,
        objsubid: identifier alias "objsubid" Sql.Types.i32,
        refobjid: identifier alias "refobjid" Sql.Types.i32,
        refclassid: identifier alias "refclassid" Sql.Types.i32,
        objid: identifier alias "objid" Sql.Types.i32,
        classid: identifier alias "classid" Sql.Types.i32,
        dbid: identifier alias "dbid" Sql.Types.i32,
    },
}

pgShdescriptionClassoid : Sql.Types.Decode (Sql.Types.PgI32 { pgShdescriptionClassoid : {} }) I32
pgShdescriptionClassoid = Sql.Types.i32

pgShdescriptionObjoid : Sql.Types.Decode (Sql.Types.PgI32 { pgShdescriptionObjoid : {} }) I32
pgShdescriptionObjoid = Sql.Types.i32

pgShdescription = {
    schema: "pg_catalog",
    name: "pg_shdescription",
    alias: "ps",
    columns: |alias| {
        description: identifier alias "description" Sql.Types.str,
        classoid: identifier alias "classoid" pgShdescriptionClassoid,
        objoid: identifier alias "objoid" pgShdescriptionObjoid,
    },
}

pgTsConfigOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTsConfigOid : {} }) I32
pgTsConfigOid = Sql.Types.i32

pgTsConfig = {
    schema: "pg_catalog",
    name: "pg_ts_config",
    alias: "ptc",
    columns: |alias| {
        cfgname: identifier alias "cfgname" Sql.Types.str,
        cfgparser: identifier alias "cfgparser" Sql.Types.i32,
        cfgowner: identifier alias "cfgowner" Sql.Types.i32,
        cfgnamespace: identifier alias "cfgnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgTsConfigOid,
    },
}

pgTsConfigMapMapseqno : Sql.Types.Decode (Sql.Types.PgI32 { pgTsConfigMapMapseqno : {} }) I32
pgTsConfigMapMapseqno = Sql.Types.i32

pgTsConfigMapMaptokentype : Sql.Types.Decode (Sql.Types.PgI32 { pgTsConfigMapMaptokentype : {} }) I32
pgTsConfigMapMaptokentype = Sql.Types.i32

pgTsConfigMapMapcfg : Sql.Types.Decode (Sql.Types.PgI32 { pgTsConfigMapMapcfg : {} }) I32
pgTsConfigMapMapcfg = Sql.Types.i32

pgTsConfigMap = {
    schema: "pg_catalog",
    name: "pg_ts_config_map",
    alias: "ptcm",
    columns: |alias| {
        mapseqno: identifier alias "mapseqno" pgTsConfigMapMapseqno,
        maptokentype: identifier alias "maptokentype" pgTsConfigMapMaptokentype,
        mapdict: identifier alias "mapdict" Sql.Types.i32,
        mapcfg: identifier alias "mapcfg" pgTsConfigMapMapcfg,
    },
}

pgTsDictOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTsDictOid : {} }) I32
pgTsDictOid = Sql.Types.i32

pgTsDict = {
    schema: "pg_catalog",
    name: "pg_ts_dict",
    alias: "ptd",
    columns: |alias| {
        dictname: identifier alias "dictname" Sql.Types.str,
        dictinitoption: identifier alias "dictinitoption" (Sql.Types.nullable Sql.Types.str),
        dicttemplate: identifier alias "dicttemplate" Sql.Types.i32,
        dictowner: identifier alias "dictowner" Sql.Types.i32,
        dictnamespace: identifier alias "dictnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgTsDictOid,
    },
}

pgTsParserOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTsParserOid : {} }) I32
pgTsParserOid = Sql.Types.i32

pgTsParser = {
    schema: "pg_catalog",
    name: "pg_ts_parser",
    alias: "ptp",
    columns: |alias| {
        prsname: identifier alias "prsname" Sql.Types.str,
        prslextype: identifier alias "prslextype" (Sql.Types.unsupported "regproc"),
        prsheadline: identifier alias "prsheadline" (Sql.Types.unsupported "regproc"),
        prsend: identifier alias "prsend" (Sql.Types.unsupported "regproc"),
        prstoken: identifier alias "prstoken" (Sql.Types.unsupported "regproc"),
        prsstart: identifier alias "prsstart" (Sql.Types.unsupported "regproc"),
        prsnamespace: identifier alias "prsnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgTsParserOid,
    },
}

pgTsTemplateOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTsTemplateOid : {} }) I32
pgTsTemplateOid = Sql.Types.i32

pgTsTemplate = {
    schema: "pg_catalog",
    name: "pg_ts_template",
    alias: "ptt",
    columns: |alias| {
        tmplname: identifier alias "tmplname" Sql.Types.str,
        tmpllexize: identifier alias "tmpllexize" (Sql.Types.unsupported "regproc"),
        tmplinit: identifier alias "tmplinit" (Sql.Types.unsupported "regproc"),
        tmplnamespace: identifier alias "tmplnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgTsTemplateOid,
    },
}

pgExtensionOid : Sql.Types.Decode (Sql.Types.PgI32 { pgExtensionOid : {} }) I32
pgExtensionOid = Sql.Types.i32

pgExtension = {
    schema: "pg_catalog",
    name: "pg_extension",
    alias: "pe",
    columns: |alias| {
        extrelocatable: identifier alias "extrelocatable" Sql.Types.bool,
        extname: identifier alias "extname" Sql.Types.str,
        extversion: identifier alias "extversion" Sql.Types.str,
        extnamespace: identifier alias "extnamespace" Sql.Types.i32,
        extowner: identifier alias "extowner" Sql.Types.i32,
        oid: identifier alias "oid" pgExtensionOid,
        extcondition: identifier alias "extcondition" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        extconfig: identifier alias "extconfig" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
    },
}

pgForeignDataWrapperOid : Sql.Types.Decode (Sql.Types.PgI32 { pgForeignDataWrapperOid : {} }) I32
pgForeignDataWrapperOid = Sql.Types.i32

pgForeignDataWrapper = {
    schema: "pg_catalog",
    name: "pg_foreign_data_wrapper",
    alias: "pfdw",
    columns: |alias| {
        fdwname: identifier alias "fdwname" Sql.Types.str,
        fdwvalidator: identifier alias "fdwvalidator" Sql.Types.i32,
        fdwhandler: identifier alias "fdwhandler" Sql.Types.i32,
        fdwowner: identifier alias "fdwowner" Sql.Types.i32,
        oid: identifier alias "oid" pgForeignDataWrapperOid,
        fdwoptions: identifier alias "fdwoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        fdwacl: identifier alias "fdwacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgForeignServerOid : Sql.Types.Decode (Sql.Types.PgI32 { pgForeignServerOid : {} }) I32
pgForeignServerOid = Sql.Types.i32

pgForeignServer = {
    schema: "pg_catalog",
    name: "pg_foreign_server",
    alias: "pfs",
    columns: |alias| {
        srvname: identifier alias "srvname" Sql.Types.str,
        srvversion: identifier alias "srvversion" (Sql.Types.nullable Sql.Types.str),
        srvtype: identifier alias "srvtype" (Sql.Types.nullable Sql.Types.str),
        srvfdw: identifier alias "srvfdw" Sql.Types.i32,
        srvowner: identifier alias "srvowner" Sql.Types.i32,
        oid: identifier alias "oid" pgForeignServerOid,
        srvoptions: identifier alias "srvoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        srvacl: identifier alias "srvacl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgPolicyOid : Sql.Types.Decode (Sql.Types.PgI32 { pgPolicyOid : {} }) I32
pgPolicyOid = Sql.Types.i32

pgPolicy = {
    schema: "pg_catalog",
    name: "pg_policy",
    alias: "pp",
    columns: |alias| {
        polpermissive: identifier alias "polpermissive" Sql.Types.bool,
        polcmd: identifier alias "polcmd" Sql.Types.str,
        polname: identifier alias "polname" Sql.Types.str,
        polrelid: identifier alias "polrelid" Sql.Types.i32,
        oid: identifier alias "oid" pgPolicyOid,
        polwithcheck: identifier alias "polwithcheck" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        polqual: identifier alias "polqual" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
        polroles: identifier alias "polroles" (Sql.Types.array (Sql.Types.nullable Sql.Types.i32)),
    },
}

pgReplicationOriginRoident : Sql.Types.Decode (Sql.Types.PgI32 { pgReplicationOriginRoident : {} }) I32
pgReplicationOriginRoident = Sql.Types.i32

pgReplicationOrigin = {
    schema: "pg_catalog",
    name: "pg_replication_origin",
    alias: "pro",
    columns: |alias| {
        roname: identifier alias "roname" Sql.Types.str,
        roident: identifier alias "roident" pgReplicationOriginRoident,
    },
}

pgDefaultAclOid : Sql.Types.Decode (Sql.Types.PgI32 { pgDefaultAclOid : {} }) I32
pgDefaultAclOid = Sql.Types.i32

pgDefaultAcl = {
    schema: "pg_catalog",
    name: "pg_default_acl",
    alias: "pda",
    columns: |alias| {
        defaclobjtype: identifier alias "defaclobjtype" Sql.Types.str,
        defaclnamespace: identifier alias "defaclnamespace" Sql.Types.i32,
        defaclrole: identifier alias "defaclrole" Sql.Types.i32,
        oid: identifier alias "oid" pgDefaultAclOid,
        defaclacl: identifier alias "defaclacl" (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem"))),
    },
}

pgInitPrivsObjsubid : Sql.Types.Decode (Sql.Types.PgI32 { pgInitPrivsObjsubid : {} }) I32
pgInitPrivsObjsubid = Sql.Types.i32

pgInitPrivsClassoid : Sql.Types.Decode (Sql.Types.PgI32 { pgInitPrivsClassoid : {} }) I32
pgInitPrivsClassoid = Sql.Types.i32

pgInitPrivsObjoid : Sql.Types.Decode (Sql.Types.PgI32 { pgInitPrivsObjoid : {} }) I32
pgInitPrivsObjoid = Sql.Types.i32

pgInitPrivs = {
    schema: "pg_catalog",
    name: "pg_init_privs",
    alias: "pip",
    columns: |alias| {
        privtype: identifier alias "privtype" Sql.Types.str,
        objsubid: identifier alias "objsubid" pgInitPrivsObjsubid,
        classoid: identifier alias "classoid" pgInitPrivsClassoid,
        objoid: identifier alias "objoid" pgInitPrivsObjoid,
        initprivs: identifier alias "initprivs" (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem"))),
    },
}

pgSeclabelObjsubid : Sql.Types.Decode (Sql.Types.PgI32 { pgSeclabelObjsubid : {} }) I32
pgSeclabelObjsubid = Sql.Types.i32

pgSeclabelProvider : Sql.Types.Decode (Sql.Types.PgText { pgSeclabelProvider : {} }) Str
pgSeclabelProvider = Sql.Types.str

pgSeclabelClassoid : Sql.Types.Decode (Sql.Types.PgI32 { pgSeclabelClassoid : {} }) I32
pgSeclabelClassoid = Sql.Types.i32

pgSeclabelObjoid : Sql.Types.Decode (Sql.Types.PgI32 { pgSeclabelObjoid : {} }) I32
pgSeclabelObjoid = Sql.Types.i32

pgSeclabel = {
    schema: "pg_catalog",
    name: "pg_seclabel",
    alias: "ps",
    columns: |alias| {
        objsubid: identifier alias "objsubid" pgSeclabelObjsubid,
        label: identifier alias "label" Sql.Types.str,
        provider: identifier alias "provider" pgSeclabelProvider,
        classoid: identifier alias "classoid" pgSeclabelClassoid,
        objoid: identifier alias "objoid" pgSeclabelObjoid,
    },
}

pgShseclabelProvider : Sql.Types.Decode (Sql.Types.PgText { pgShseclabelProvider : {} }) Str
pgShseclabelProvider = Sql.Types.str

pgShseclabelClassoid : Sql.Types.Decode (Sql.Types.PgI32 { pgShseclabelClassoid : {} }) I32
pgShseclabelClassoid = Sql.Types.i32

pgShseclabelObjoid : Sql.Types.Decode (Sql.Types.PgI32 { pgShseclabelObjoid : {} }) I32
pgShseclabelObjoid = Sql.Types.i32

pgShseclabel = {
    schema: "pg_catalog",
    name: "pg_shseclabel",
    alias: "ps",
    columns: |alias| {
        label: identifier alias "label" Sql.Types.str,
        provider: identifier alias "provider" pgShseclabelProvider,
        classoid: identifier alias "classoid" pgShseclabelClassoid,
        objoid: identifier alias "objoid" pgShseclabelObjoid,
    },
}

pgCollationOid : Sql.Types.Decode (Sql.Types.PgI32 { pgCollationOid : {} }) I32
pgCollationOid = Sql.Types.i32

pgCollation = {
    schema: "pg_catalog",
    name: "pg_collation",
    alias: "pc",
    columns: |alias| {
        collisdeterministic: identifier alias "collisdeterministic" Sql.Types.bool,
        collprovider: identifier alias "collprovider" Sql.Types.str,
        collname: identifier alias "collname" Sql.Types.str,
        collencoding: identifier alias "collencoding" Sql.Types.i32,
        collversion: identifier alias "collversion" (Sql.Types.nullable Sql.Types.str),
        colliculocale: identifier alias "colliculocale" (Sql.Types.nullable Sql.Types.str),
        collctype: identifier alias "collctype" (Sql.Types.nullable Sql.Types.str),
        collcollate: identifier alias "collcollate" (Sql.Types.nullable Sql.Types.str),
        collowner: identifier alias "collowner" Sql.Types.i32,
        collnamespace: identifier alias "collnamespace" Sql.Types.i32,
        oid: identifier alias "oid" pgCollationOid,
    },
}

pgParameterAclOid : Sql.Types.Decode (Sql.Types.PgI32 { pgParameterAclOid : {} }) I32
pgParameterAclOid = Sql.Types.i32

pgParameterAcl = {
    schema: "pg_catalog",
    name: "pg_parameter_acl",
    alias: "ppa",
    columns: |alias| {
        parname: identifier alias "parname" Sql.Types.str,
        oid: identifier alias "oid" pgParameterAclOid,
        paracl: identifier alias "paracl" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "aclitem")))),
    },
}

pgPartitionedTablePartrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgPartitionedTablePartrelid : {} }) I32
pgPartitionedTablePartrelid = Sql.Types.i32

pgPartitionedTable = {
    schema: "pg_catalog",
    name: "pg_partitioned_table",
    alias: "ppt",
    columns: |alias| {
        partstrat: identifier alias "partstrat" Sql.Types.str,
        partnatts: identifier alias "partnatts" Sql.Types.i16,
        partattrs: identifier alias "partattrs" (Sql.Types.array (Sql.Types.nullable Sql.Types.i16)),
        partdefid: identifier alias "partdefid" Sql.Types.i32,
        partrelid: identifier alias "partrelid" pgPartitionedTablePartrelid,
        partcollation: identifier alias "partcollation" (Sql.Types.array (Sql.Types.nullable Sql.Types.i32)),
        partclass: identifier alias "partclass" (Sql.Types.array (Sql.Types.nullable Sql.Types.i32)),
        partexprs: identifier alias "partexprs" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
    },
}

pgRangeRngtypid : Sql.Types.Decode (Sql.Types.PgI32 { pgRangeRngtypid : {} }) I32
pgRangeRngtypid = Sql.Types.i32

pgRange = {
    schema: "pg_catalog",
    name: "pg_range",
    alias: "pr",
    columns: |alias| {
        rngsubdiff: identifier alias "rngsubdiff" (Sql.Types.unsupported "regproc"),
        rngcanonical: identifier alias "rngcanonical" (Sql.Types.unsupported "regproc"),
        rngsubopc: identifier alias "rngsubopc" Sql.Types.i32,
        rngcollation: identifier alias "rngcollation" Sql.Types.i32,
        rngmultitypid: identifier alias "rngmultitypid" Sql.Types.i32,
        rngsubtype: identifier alias "rngsubtype" Sql.Types.i32,
        rngtypid: identifier alias "rngtypid" pgRangeRngtypid,
    },
}

pgTransformOid : Sql.Types.Decode (Sql.Types.PgI32 { pgTransformOid : {} }) I32
pgTransformOid = Sql.Types.i32

pgTransform = {
    schema: "pg_catalog",
    name: "pg_transform",
    alias: "pt",
    columns: |alias| {
        trftosql: identifier alias "trftosql" (Sql.Types.unsupported "regproc"),
        trffromsql: identifier alias "trffromsql" (Sql.Types.unsupported "regproc"),
        trflang: identifier alias "trflang" Sql.Types.i32,
        trftype: identifier alias "trftype" Sql.Types.i32,
        oid: identifier alias "oid" pgTransformOid,
    },
}

pgSequenceSeqrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgSequenceSeqrelid : {} }) I32
pgSequenceSeqrelid = Sql.Types.i32

pgSequence = {
    schema: "pg_catalog",
    name: "pg_sequence",
    alias: "ps",
    columns: |alias| {
        seqcycle: identifier alias "seqcycle" Sql.Types.bool,
        seqcache: identifier alias "seqcache" Sql.Types.i64,
        seqmin: identifier alias "seqmin" Sql.Types.i64,
        seqmax: identifier alias "seqmax" Sql.Types.i64,
        seqincrement: identifier alias "seqincrement" Sql.Types.i64,
        seqstart: identifier alias "seqstart" Sql.Types.i64,
        seqtypid: identifier alias "seqtypid" Sql.Types.i32,
        seqrelid: identifier alias "seqrelid" pgSequenceSeqrelid,
    },
}

pgPublicationOid : Sql.Types.Decode (Sql.Types.PgI32 { pgPublicationOid : {} }) I32
pgPublicationOid = Sql.Types.i32

pgPublication = {
    schema: "pg_catalog",
    name: "pg_publication",
    alias: "pp",
    columns: |alias| {
        pubviaroot: identifier alias "pubviaroot" Sql.Types.bool,
        pubtruncate: identifier alias "pubtruncate" Sql.Types.bool,
        pubdelete: identifier alias "pubdelete" Sql.Types.bool,
        pubupdate: identifier alias "pubupdate" Sql.Types.bool,
        pubinsert: identifier alias "pubinsert" Sql.Types.bool,
        puballtables: identifier alias "puballtables" Sql.Types.bool,
        pubname: identifier alias "pubname" Sql.Types.str,
        pubowner: identifier alias "pubowner" Sql.Types.i32,
        oid: identifier alias "oid" pgPublicationOid,
    },
}

pgPublicationNamespaceOid : Sql.Types.Decode (Sql.Types.PgI32 { pgPublicationNamespaceOid : {} }) I32
pgPublicationNamespaceOid = Sql.Types.i32

pgPublicationNamespace = {
    schema: "pg_catalog",
    name: "pg_publication_namespace",
    alias: "ppn",
    columns: |alias| {
        pnnspid: identifier alias "pnnspid" Sql.Types.i32,
        pnpubid: identifier alias "pnpubid" Sql.Types.i32,
        oid: identifier alias "oid" pgPublicationNamespaceOid,
    },
}

pgPublicationRelOid : Sql.Types.Decode (Sql.Types.PgI32 { pgPublicationRelOid : {} }) I32
pgPublicationRelOid = Sql.Types.i32

pgPublicationRel = {
    schema: "pg_catalog",
    name: "pg_publication_rel",
    alias: "ppr",
    columns: |alias| {
        prattrs: identifier alias "prattrs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i16))),
        prrelid: identifier alias "prrelid" Sql.Types.i32,
        prpubid: identifier alias "prpubid" Sql.Types.i32,
        oid: identifier alias "oid" pgPublicationRelOid,
        prqual: identifier alias "prqual" (Sql.Types.nullable (Sql.Types.unsupported "pg_node_tree")),
    },
}

pgSubscriptionRelSrrelid : Sql.Types.Decode (Sql.Types.PgI32 { pgSubscriptionRelSrrelid : {} }) I32
pgSubscriptionRelSrrelid = Sql.Types.i32

pgSubscriptionRelSrsubid : Sql.Types.Decode (Sql.Types.PgI32 { pgSubscriptionRelSrsubid : {} }) I32
pgSubscriptionRelSrsubid = Sql.Types.i32

pgSubscriptionRel = {
    schema: "pg_catalog",
    name: "pg_subscription_rel",
    alias: "psr",
    columns: |alias| {
        srsubstate: identifier alias "srsubstate" Sql.Types.str,
        srrelid: identifier alias "srrelid" pgSubscriptionRelSrrelid,
        srsubid: identifier alias "srsubid" pgSubscriptionRelSrsubid,
        srsublsn: identifier alias "srsublsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
    },
}

pgGroup = {
    schema: "pg_catalog",
    name: "pg_group",
    alias: "pg",
    columns: |alias| {
        groname: identifier alias "groname" (Sql.Types.nullable Sql.Types.str),
        grosysid: identifier alias "grosysid" (Sql.Types.nullable Sql.Types.i32),
        grolist: identifier alias "grolist" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.i32))),
    },
}

pgUser = {
    schema: "pg_catalog",
    name: "pg_user",
    alias: "pu",
    columns: |alias| {
        usebypassrls: identifier alias "usebypassrls" (Sql.Types.nullable Sql.Types.bool),
        userepl: identifier alias "userepl" (Sql.Types.nullable Sql.Types.bool),
        usesuper: identifier alias "usesuper" (Sql.Types.nullable Sql.Types.bool),
        usecreatedb: identifier alias "usecreatedb" (Sql.Types.nullable Sql.Types.bool),
        usename: identifier alias "usename" (Sql.Types.nullable Sql.Types.str),
        passwd: identifier alias "passwd" (Sql.Types.nullable Sql.Types.str),
        usesysid: identifier alias "usesysid" (Sql.Types.nullable Sql.Types.i32),
        valuntil: identifier alias "valuntil" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        useconfig: identifier alias "useconfig" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgPolicies = {
    schema: "pg_catalog",
    name: "pg_policies",
    alias: "pp",
    columns: |alias| {
        policyname: identifier alias "policyname" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        withCheck: identifier alias "with_check" (Sql.Types.nullable Sql.Types.str),
        qual: identifier alias "qual" (Sql.Types.nullable Sql.Types.str),
        cmd: identifier alias "cmd" (Sql.Types.nullable Sql.Types.str),
        permissive: identifier alias "permissive" (Sql.Types.nullable Sql.Types.str),
        roles: identifier alias "roles" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgRules = {
    schema: "pg_catalog",
    name: "pg_rules",
    alias: "pr",
    columns: |alias| {
        rulename: identifier alias "rulename" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        definition: identifier alias "definition" (Sql.Types.nullable Sql.Types.str),
    },
}

pgViews = {
    schema: "pg_catalog",
    name: "pg_views",
    alias: "pv",
    columns: |alias| {
        viewowner: identifier alias "viewowner" (Sql.Types.nullable Sql.Types.str),
        viewname: identifier alias "viewname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        definition: identifier alias "definition" (Sql.Types.nullable Sql.Types.str),
    },
}

pgTables = {
    schema: "pg_catalog",
    name: "pg_tables",
    alias: "pt",
    columns: |alias| {
        rowsecurity: identifier alias "rowsecurity" (Sql.Types.nullable Sql.Types.bool),
        hastriggers: identifier alias "hastriggers" (Sql.Types.nullable Sql.Types.bool),
        hasrules: identifier alias "hasrules" (Sql.Types.nullable Sql.Types.bool),
        hasindexes: identifier alias "hasindexes" (Sql.Types.nullable Sql.Types.bool),
        tablespace: identifier alias "tablespace" (Sql.Types.nullable Sql.Types.str),
        tableowner: identifier alias "tableowner" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
    },
}

pgMatviews = {
    schema: "pg_catalog",
    name: "pg_matviews",
    alias: "pm",
    columns: |alias| {
        ispopulated: identifier alias "ispopulated" (Sql.Types.nullable Sql.Types.bool),
        hasindexes: identifier alias "hasindexes" (Sql.Types.nullable Sql.Types.bool),
        tablespace: identifier alias "tablespace" (Sql.Types.nullable Sql.Types.str),
        matviewowner: identifier alias "matviewowner" (Sql.Types.nullable Sql.Types.str),
        matviewname: identifier alias "matviewname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        definition: identifier alias "definition" (Sql.Types.nullable Sql.Types.str),
    },
}

pgIndexes = {
    schema: "pg_catalog",
    name: "pg_indexes",
    alias: "pi",
    columns: |alias| {
        tablespace: identifier alias "tablespace" (Sql.Types.nullable Sql.Types.str),
        indexname: identifier alias "indexname" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        indexdef: identifier alias "indexdef" (Sql.Types.nullable Sql.Types.str),
    },
}

pgSequences = {
    schema: "pg_catalog",
    name: "pg_sequences",
    alias: "ps",
    columns: |alias| {
        cycle: identifier alias "cycle" (Sql.Types.nullable Sql.Types.bool),
        sequenceowner: identifier alias "sequenceowner" (Sql.Types.nullable Sql.Types.str),
        sequencename: identifier alias "sequencename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        lastValue: identifier alias "last_value" (Sql.Types.nullable Sql.Types.i64),
        cacheSize: identifier alias "cache_size" (Sql.Types.nullable Sql.Types.i64),
        incrementBy: identifier alias "increment_by" (Sql.Types.nullable Sql.Types.i64),
        maxValue: identifier alias "max_value" (Sql.Types.nullable Sql.Types.i64),
        minValue: identifier alias "min_value" (Sql.Types.nullable Sql.Types.i64),
        startValue: identifier alias "start_value" (Sql.Types.nullable Sql.Types.i64),
        dataType: identifier alias "data_type" (Sql.Types.nullable (Sql.Types.unsupported "regtype")),
    },
}

pgStats = {
    schema: "pg_catalog",
    name: "pg_stats",
    alias: "ps",
    columns: |alias| {
        inherited: identifier alias "inherited" (Sql.Types.nullable Sql.Types.bool),
        attname: identifier alias "attname" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        avgWidth: identifier alias "avg_width" (Sql.Types.nullable Sql.Types.i32),
        correlation: identifier alias "correlation" (Sql.Types.nullable Sql.Types.f32),
        nDistinct: identifier alias "n_distinct" (Sql.Types.nullable Sql.Types.f32),
        nullFrac: identifier alias "null_frac" (Sql.Types.nullable Sql.Types.f32),
        mostCommonElems: identifier alias "most_common_elems" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        histogramBounds: identifier alias "histogram_bounds" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        mostCommonVals: identifier alias "most_common_vals" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        elemCountHistogram: identifier alias "elem_count_histogram" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        mostCommonElemFreqs: identifier alias "most_common_elem_freqs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        mostCommonFreqs: identifier alias "most_common_freqs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
    },
}

pgStatsExt = {
    schema: "pg_catalog",
    name: "pg_stats_ext",
    alias: "pse",
    columns: |alias| {
        inherited: identifier alias "inherited" (Sql.Types.nullable Sql.Types.bool),
        statisticsOwner: identifier alias "statistics_owner" (Sql.Types.nullable Sql.Types.str),
        statisticsName: identifier alias "statistics_name" (Sql.Types.nullable Sql.Types.str),
        statisticsSchemaname: identifier alias "statistics_schemaname" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        nDistinct: identifier alias "n_distinct" (Sql.Types.nullable (Sql.Types.unsupported "pg_ndistinct")),
        dependencies: identifier alias "dependencies" (Sql.Types.nullable (Sql.Types.unsupported "pg_dependencies")),
        mostCommonValNulls: identifier alias "most_common_val_nulls" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.bool))),
        kinds: identifier alias "kinds" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        attnames: identifier alias "attnames" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        mostCommonVals: identifier alias "most_common_vals" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        exprs: identifier alias "exprs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
        mostCommonBaseFreqs: identifier alias "most_common_base_freqs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f64))),
        mostCommonFreqs: identifier alias "most_common_freqs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f64))),
    },
}

pgStatsExtExprs = {
    schema: "pg_catalog",
    name: "pg_stats_ext_exprs",
    alias: "psee",
    columns: |alias| {
        inherited: identifier alias "inherited" (Sql.Types.nullable Sql.Types.bool),
        statisticsOwner: identifier alias "statistics_owner" (Sql.Types.nullable Sql.Types.str),
        statisticsName: identifier alias "statistics_name" (Sql.Types.nullable Sql.Types.str),
        statisticsSchemaname: identifier alias "statistics_schemaname" (Sql.Types.nullable Sql.Types.str),
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        avgWidth: identifier alias "avg_width" (Sql.Types.nullable Sql.Types.i32),
        expr: identifier alias "expr" (Sql.Types.nullable Sql.Types.str),
        correlation: identifier alias "correlation" (Sql.Types.nullable Sql.Types.f32),
        nDistinct: identifier alias "n_distinct" (Sql.Types.nullable Sql.Types.f32),
        nullFrac: identifier alias "null_frac" (Sql.Types.nullable Sql.Types.f32),
        mostCommonElems: identifier alias "most_common_elems" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        histogramBounds: identifier alias "histogram_bounds" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        mostCommonVals: identifier alias "most_common_vals" (Sql.Types.nullable (Sql.Types.unsupported "anyarray")),
        elemCountHistogram: identifier alias "elem_count_histogram" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        mostCommonElemFreqs: identifier alias "most_common_elem_freqs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
        mostCommonFreqs: identifier alias "most_common_freqs" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.f32))),
    },
}

pgPublicationTables = {
    schema: "pg_catalog",
    name: "pg_publication_tables",
    alias: "ppt",
    columns: |alias| {
        tablename: identifier alias "tablename" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        pubname: identifier alias "pubname" (Sql.Types.nullable Sql.Types.str),
        rowfilter: identifier alias "rowfilter" (Sql.Types.nullable Sql.Types.str),
        attnames: identifier alias "attnames" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgLocks = {
    schema: "pg_catalog",
    name: "pg_locks",
    alias: "pl",
    columns: |alias| {
        fastpath: identifier alias "fastpath" (Sql.Types.nullable Sql.Types.bool),
        granted: identifier alias "granted" (Sql.Types.nullable Sql.Types.bool),
        objsubid: identifier alias "objsubid" (Sql.Types.nullable Sql.Types.i16),
        tuple: identifier alias "tuple" (Sql.Types.nullable Sql.Types.i16),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        page: identifier alias "page" (Sql.Types.nullable Sql.Types.i32),
        mode: identifier alias "mode" (Sql.Types.nullable Sql.Types.str),
        virtualtransaction: identifier alias "virtualtransaction" (Sql.Types.nullable Sql.Types.str),
        virtualxid: identifier alias "virtualxid" (Sql.Types.nullable Sql.Types.str),
        locktype: identifier alias "locktype" (Sql.Types.nullable Sql.Types.str),
        objid: identifier alias "objid" (Sql.Types.nullable Sql.Types.i32),
        classid: identifier alias "classid" (Sql.Types.nullable Sql.Types.i32),
        relation: identifier alias "relation" (Sql.Types.nullable Sql.Types.i32),
        database: identifier alias "database" (Sql.Types.nullable Sql.Types.i32),
        transactionid: identifier alias "transactionid" (Sql.Types.nullable Sql.Types.i32),
        waitstart: identifier alias "waitstart" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgCursors = {
    schema: "pg_catalog",
    name: "pg_cursors",
    alias: "pc",
    columns: |alias| {
        isScrollable: identifier alias "is_scrollable" (Sql.Types.nullable Sql.Types.bool),
        isBinary: identifier alias "is_binary" (Sql.Types.nullable Sql.Types.bool),
        isHoldable: identifier alias "is_holdable" (Sql.Types.nullable Sql.Types.bool),
        statement: identifier alias "statement" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        creationTime: identifier alias "creation_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgAvailableExtensions = {
    schema: "pg_catalog",
    name: "pg_available_extensions",
    alias: "pae",
    columns: |alias| {
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        comment: identifier alias "comment" (Sql.Types.nullable Sql.Types.str),
        installedVersion: identifier alias "installed_version" (Sql.Types.nullable Sql.Types.str),
        defaultVersion: identifier alias "default_version" (Sql.Types.nullable Sql.Types.str),
    },
}

pgAvailableExtensionVersions = {
    schema: "pg_catalog",
    name: "pg_available_extension_versions",
    alias: "paev",
    columns: |alias| {
        relocatable: identifier alias "relocatable" (Sql.Types.nullable Sql.Types.bool),
        trusted: identifier alias "trusted" (Sql.Types.nullable Sql.Types.bool),
        superuser: identifier alias "superuser" (Sql.Types.nullable Sql.Types.bool),
        installed: identifier alias "installed" (Sql.Types.nullable Sql.Types.bool),
        schema: identifier alias "schema" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        comment: identifier alias "comment" (Sql.Types.nullable Sql.Types.str),
        version: identifier alias "version" (Sql.Types.nullable Sql.Types.str),
        requires: identifier alias "requires" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgPreparedXacts = {
    schema: "pg_catalog",
    name: "pg_prepared_xacts",
    alias: "ppx",
    columns: |alias| {
        database: identifier alias "database" (Sql.Types.nullable Sql.Types.str),
        owner: identifier alias "owner" (Sql.Types.nullable Sql.Types.str),
        gid: identifier alias "gid" (Sql.Types.nullable Sql.Types.str),
        transaction: identifier alias "transaction" (Sql.Types.nullable Sql.Types.i32),
        prepared: identifier alias "prepared" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgPreparedStatements = {
    schema: "pg_catalog",
    name: "pg_prepared_statements",
    alias: "pps",
    columns: |alias| {
        fromSql: identifier alias "from_sql" (Sql.Types.nullable Sql.Types.bool),
        customPlans: identifier alias "custom_plans" (Sql.Types.nullable Sql.Types.i64),
        genericPlans: identifier alias "generic_plans" (Sql.Types.nullable Sql.Types.i64),
        statement: identifier alias "statement" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        prepareTime: identifier alias "prepare_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        parameterTypes: identifier alias "parameter_types" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable (Sql.Types.unsupported "regtype")))),
    },
}

pgSeclabels = {
    schema: "pg_catalog",
    name: "pg_seclabels",
    alias: "ps",
    columns: |alias| {
        objsubid: identifier alias "objsubid" (Sql.Types.nullable Sql.Types.i32),
        label: identifier alias "label" (Sql.Types.nullable Sql.Types.str),
        provider: identifier alias "provider" (Sql.Types.nullable Sql.Types.str),
        objname: identifier alias "objname" (Sql.Types.nullable Sql.Types.str),
        objtype: identifier alias "objtype" (Sql.Types.nullable Sql.Types.str),
        objnamespace: identifier alias "objnamespace" (Sql.Types.nullable Sql.Types.i32),
        classoid: identifier alias "classoid" (Sql.Types.nullable Sql.Types.i32),
        objoid: identifier alias "objoid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgTimezoneAbbrevs = {
    schema: "pg_catalog",
    name: "pg_timezone_abbrevs",
    alias: "pta",
    columns: |alias| {
        isDst: identifier alias "is_dst" (Sql.Types.nullable Sql.Types.bool),
        abbrev: identifier alias "abbrev" (Sql.Types.nullable Sql.Types.str),
        utcOffset: identifier alias "utc_offset" (Sql.Types.nullable (Sql.Types.unsupported "interval")),
    },
}

pgTimezoneNames = {
    schema: "pg_catalog",
    name: "pg_timezone_names",
    alias: "ptn",
    columns: |alias| {
        isDst: identifier alias "is_dst" (Sql.Types.nullable Sql.Types.bool),
        abbrev: identifier alias "abbrev" (Sql.Types.nullable Sql.Types.str),
        name: identifier alias "name" (Sql.Types.nullable Sql.Types.str),
        utcOffset: identifier alias "utc_offset" (Sql.Types.nullable (Sql.Types.unsupported "interval")),
    },
}

pgStatSysTables = {
    schema: "pg_catalog",
    name: "pg_stat_sys_tables",
    alias: "psst",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        autoanalyzeCount: identifier alias "autoanalyze_count" (Sql.Types.nullable Sql.Types.i64),
        analyzeCount: identifier alias "analyze_count" (Sql.Types.nullable Sql.Types.i64),
        autovacuumCount: identifier alias "autovacuum_count" (Sql.Types.nullable Sql.Types.i64),
        vacuumCount: identifier alias "vacuum_count" (Sql.Types.nullable Sql.Types.i64),
        nInsSinceVacuum: identifier alias "n_ins_since_vacuum" (Sql.Types.nullable Sql.Types.i64),
        nModSinceAnalyze: identifier alias "n_mod_since_analyze" (Sql.Types.nullable Sql.Types.i64),
        nDeadTup: identifier alias "n_dead_tup" (Sql.Types.nullable Sql.Types.i64),
        nLiveTup: identifier alias "n_live_tup" (Sql.Types.nullable Sql.Types.i64),
        nTupHotUpd: identifier alias "n_tup_hot_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupDel: identifier alias "n_tup_del" (Sql.Types.nullable Sql.Types.i64),
        nTupUpd: identifier alias "n_tup_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupIns: identifier alias "n_tup_ins" (Sql.Types.nullable Sql.Types.i64),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        seqTupRead: identifier alias "seq_tup_read" (Sql.Types.nullable Sql.Types.i64),
        seqScan: identifier alias "seq_scan" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        lastAutoanalyze: identifier alias "last_autoanalyze" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastAnalyze: identifier alias "last_analyze" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastAutovacuum: identifier alias "last_autovacuum" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastVacuum: identifier alias "last_vacuum" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatXactSysTables = {
    schema: "pg_catalog",
    name: "pg_stat_xact_sys_tables",
    alias: "psxst",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        nTupHotUpd: identifier alias "n_tup_hot_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupDel: identifier alias "n_tup_del" (Sql.Types.nullable Sql.Types.i64),
        nTupUpd: identifier alias "n_tup_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupIns: identifier alias "n_tup_ins" (Sql.Types.nullable Sql.Types.i64),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        seqTupRead: identifier alias "seq_tup_read" (Sql.Types.nullable Sql.Types.i64),
        seqScan: identifier alias "seq_scan" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatUserTables = {
    schema: "pg_catalog",
    name: "pg_stat_user_tables",
    alias: "psut",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        autoanalyzeCount: identifier alias "autoanalyze_count" (Sql.Types.nullable Sql.Types.i64),
        analyzeCount: identifier alias "analyze_count" (Sql.Types.nullable Sql.Types.i64),
        autovacuumCount: identifier alias "autovacuum_count" (Sql.Types.nullable Sql.Types.i64),
        vacuumCount: identifier alias "vacuum_count" (Sql.Types.nullable Sql.Types.i64),
        nInsSinceVacuum: identifier alias "n_ins_since_vacuum" (Sql.Types.nullable Sql.Types.i64),
        nModSinceAnalyze: identifier alias "n_mod_since_analyze" (Sql.Types.nullable Sql.Types.i64),
        nDeadTup: identifier alias "n_dead_tup" (Sql.Types.nullable Sql.Types.i64),
        nLiveTup: identifier alias "n_live_tup" (Sql.Types.nullable Sql.Types.i64),
        nTupHotUpd: identifier alias "n_tup_hot_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupDel: identifier alias "n_tup_del" (Sql.Types.nullable Sql.Types.i64),
        nTupUpd: identifier alias "n_tup_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupIns: identifier alias "n_tup_ins" (Sql.Types.nullable Sql.Types.i64),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        seqTupRead: identifier alias "seq_tup_read" (Sql.Types.nullable Sql.Types.i64),
        seqScan: identifier alias "seq_scan" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        lastAutoanalyze: identifier alias "last_autoanalyze" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastAnalyze: identifier alias "last_analyze" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastAutovacuum: identifier alias "last_autovacuum" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastVacuum: identifier alias "last_vacuum" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatAllTables = {
    schema: "pg_catalog",
    name: "pg_stat_all_tables",
    alias: "psat",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        autoanalyzeCount: identifier alias "autoanalyze_count" (Sql.Types.nullable Sql.Types.i64),
        analyzeCount: identifier alias "analyze_count" (Sql.Types.nullable Sql.Types.i64),
        autovacuumCount: identifier alias "autovacuum_count" (Sql.Types.nullable Sql.Types.i64),
        vacuumCount: identifier alias "vacuum_count" (Sql.Types.nullable Sql.Types.i64),
        nInsSinceVacuum: identifier alias "n_ins_since_vacuum" (Sql.Types.nullable Sql.Types.i64),
        nModSinceAnalyze: identifier alias "n_mod_since_analyze" (Sql.Types.nullable Sql.Types.i64),
        nDeadTup: identifier alias "n_dead_tup" (Sql.Types.nullable Sql.Types.i64),
        nLiveTup: identifier alias "n_live_tup" (Sql.Types.nullable Sql.Types.i64),
        nTupHotUpd: identifier alias "n_tup_hot_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupDel: identifier alias "n_tup_del" (Sql.Types.nullable Sql.Types.i64),
        nTupUpd: identifier alias "n_tup_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupIns: identifier alias "n_tup_ins" (Sql.Types.nullable Sql.Types.i64),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        seqTupRead: identifier alias "seq_tup_read" (Sql.Types.nullable Sql.Types.i64),
        seqScan: identifier alias "seq_scan" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        lastAutoanalyze: identifier alias "last_autoanalyze" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastAnalyze: identifier alias "last_analyze" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastAutovacuum: identifier alias "last_autovacuum" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastVacuum: identifier alias "last_vacuum" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatXactAllTables = {
    schema: "pg_catalog",
    name: "pg_stat_xact_all_tables",
    alias: "psxat",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        nTupHotUpd: identifier alias "n_tup_hot_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupDel: identifier alias "n_tup_del" (Sql.Types.nullable Sql.Types.i64),
        nTupUpd: identifier alias "n_tup_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupIns: identifier alias "n_tup_ins" (Sql.Types.nullable Sql.Types.i64),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        seqTupRead: identifier alias "seq_tup_read" (Sql.Types.nullable Sql.Types.i64),
        seqScan: identifier alias "seq_scan" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatXactUserTables = {
    schema: "pg_catalog",
    name: "pg_stat_xact_user_tables",
    alias: "psxut",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        nTupHotUpd: identifier alias "n_tup_hot_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupDel: identifier alias "n_tup_del" (Sql.Types.nullable Sql.Types.i64),
        nTupUpd: identifier alias "n_tup_upd" (Sql.Types.nullable Sql.Types.i64),
        nTupIns: identifier alias "n_tup_ins" (Sql.Types.nullable Sql.Types.i64),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        seqTupRead: identifier alias "seq_tup_read" (Sql.Types.nullable Sql.Types.i64),
        seqScan: identifier alias "seq_scan" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioAllTables = {
    schema: "pg_catalog",
    name: "pg_statio_all_tables",
    alias: "psat",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        tidxBlksHit: identifier alias "tidx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        tidxBlksRead: identifier alias "tidx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        toastBlksHit: identifier alias "toast_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        toastBlksRead: identifier alias "toast_blks_read" (Sql.Types.nullable Sql.Types.i64),
        idxBlksHit: identifier alias "idx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        idxBlksRead: identifier alias "idx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        heapBlksHit: identifier alias "heap_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        heapBlksRead: identifier alias "heap_blks_read" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioSysTables = {
    schema: "pg_catalog",
    name: "pg_statio_sys_tables",
    alias: "psst",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        tidxBlksHit: identifier alias "tidx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        tidxBlksRead: identifier alias "tidx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        toastBlksHit: identifier alias "toast_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        toastBlksRead: identifier alias "toast_blks_read" (Sql.Types.nullable Sql.Types.i64),
        idxBlksHit: identifier alias "idx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        idxBlksRead: identifier alias "idx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        heapBlksHit: identifier alias "heap_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        heapBlksRead: identifier alias "heap_blks_read" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioUserTables = {
    schema: "pg_catalog",
    name: "pg_statio_user_tables",
    alias: "psut",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        tidxBlksHit: identifier alias "tidx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        tidxBlksRead: identifier alias "tidx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        toastBlksHit: identifier alias "toast_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        toastBlksRead: identifier alias "toast_blks_read" (Sql.Types.nullable Sql.Types.i64),
        idxBlksHit: identifier alias "idx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        idxBlksRead: identifier alias "idx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        heapBlksHit: identifier alias "heap_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        heapBlksRead: identifier alias "heap_blks_read" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatAllIndexes = {
    schema: "pg_catalog",
    name: "pg_stat_all_indexes",
    alias: "psai",
    columns: |alias| {
        indexrelname: identifier alias "indexrelname" (Sql.Types.nullable Sql.Types.str),
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxTupRead: identifier alias "idx_tup_read" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        indexrelid: identifier alias "indexrelid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatSysIndexes = {
    schema: "pg_catalog",
    name: "pg_stat_sys_indexes",
    alias: "pssi",
    columns: |alias| {
        indexrelname: identifier alias "indexrelname" (Sql.Types.nullable Sql.Types.str),
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxTupRead: identifier alias "idx_tup_read" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        indexrelid: identifier alias "indexrelid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatUserIndexes = {
    schema: "pg_catalog",
    name: "pg_stat_user_indexes",
    alias: "psui",
    columns: |alias| {
        indexrelname: identifier alias "indexrelname" (Sql.Types.nullable Sql.Types.str),
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        idxTupFetch: identifier alias "idx_tup_fetch" (Sql.Types.nullable Sql.Types.i64),
        idxTupRead: identifier alias "idx_tup_read" (Sql.Types.nullable Sql.Types.i64),
        idxScan: identifier alias "idx_scan" (Sql.Types.nullable Sql.Types.i64),
        indexrelid: identifier alias "indexrelid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioAllIndexes = {
    schema: "pg_catalog",
    name: "pg_statio_all_indexes",
    alias: "psai",
    columns: |alias| {
        indexrelname: identifier alias "indexrelname" (Sql.Types.nullable Sql.Types.str),
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        idxBlksHit: identifier alias "idx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        idxBlksRead: identifier alias "idx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        indexrelid: identifier alias "indexrelid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioSysIndexes = {
    schema: "pg_catalog",
    name: "pg_statio_sys_indexes",
    alias: "pssi",
    columns: |alias| {
        indexrelname: identifier alias "indexrelname" (Sql.Types.nullable Sql.Types.str),
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        idxBlksHit: identifier alias "idx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        idxBlksRead: identifier alias "idx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        indexrelid: identifier alias "indexrelid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioUserIndexes = {
    schema: "pg_catalog",
    name: "pg_statio_user_indexes",
    alias: "psui",
    columns: |alias| {
        indexrelname: identifier alias "indexrelname" (Sql.Types.nullable Sql.Types.str),
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        idxBlksHit: identifier alias "idx_blks_hit" (Sql.Types.nullable Sql.Types.i64),
        idxBlksRead: identifier alias "idx_blks_read" (Sql.Types.nullable Sql.Types.i64),
        indexrelid: identifier alias "indexrelid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioAllSequences = {
    schema: "pg_catalog",
    name: "pg_statio_all_sequences",
    alias: "psas",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        blksHit: identifier alias "blks_hit" (Sql.Types.nullable Sql.Types.i64),
        blksRead: identifier alias "blks_read" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioSysSequences = {
    schema: "pg_catalog",
    name: "pg_statio_sys_sequences",
    alias: "psss",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        blksHit: identifier alias "blks_hit" (Sql.Types.nullable Sql.Types.i64),
        blksRead: identifier alias "blks_read" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatioUserSequences = {
    schema: "pg_catalog",
    name: "pg_statio_user_sequences",
    alias: "psus",
    columns: |alias| {
        relname: identifier alias "relname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        blksHit: identifier alias "blks_hit" (Sql.Types.nullable Sql.Types.i64),
        blksRead: identifier alias "blks_read" (Sql.Types.nullable Sql.Types.i64),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatSubscription = {
    schema: "pg_catalog",
    name: "pg_stat_subscription",
    alias: "pss",
    columns: |alias| {
        subname: identifier alias "subname" (Sql.Types.nullable Sql.Types.str),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        subid: identifier alias "subid" (Sql.Types.nullable Sql.Types.i32),
        latestEndTime: identifier alias "latest_end_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastMsgReceiptTime: identifier alias "last_msg_receipt_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastMsgSendTime: identifier alias "last_msg_send_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        latestEndLsn: identifier alias "latest_end_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        receivedLsn: identifier alias "received_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
    },
}

pgStatSsl = {
    schema: "pg_catalog",
    name: "pg_stat_ssl",
    alias: "pss",
    columns: |alias| {
        ssl: identifier alias "ssl" (Sql.Types.nullable Sql.Types.bool),
        bits: identifier alias "bits" (Sql.Types.nullable Sql.Types.i32),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        issuerDn: identifier alias "issuer_dn" (Sql.Types.nullable Sql.Types.str),
        clientDn: identifier alias "client_dn" (Sql.Types.nullable Sql.Types.str),
        cipher: identifier alias "cipher" (Sql.Types.nullable Sql.Types.str),
        version: identifier alias "version" (Sql.Types.nullable Sql.Types.str),
        clientSerial: identifier alias "client_serial" (Sql.Types.nullable Sql.Types.dec),
    },
}

pgStatGssapi = {
    schema: "pg_catalog",
    name: "pg_stat_gssapi",
    alias: "psg",
    columns: |alias| {
        encrypted: identifier alias "encrypted" (Sql.Types.nullable Sql.Types.bool),
        gssAuthenticated: identifier alias "gss_authenticated" (Sql.Types.nullable Sql.Types.bool),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        principal: identifier alias "principal" (Sql.Types.nullable Sql.Types.str),
    },
}

pgReplicationSlots = {
    schema: "pg_catalog",
    name: "pg_replication_slots",
    alias: "prs",
    columns: |alias| {
        twoPhase: identifier alias "two_phase" (Sql.Types.nullable Sql.Types.bool),
        active: identifier alias "active" (Sql.Types.nullable Sql.Types.bool),
        temporary: identifier alias "temporary" (Sql.Types.nullable Sql.Types.bool),
        database: identifier alias "database" (Sql.Types.nullable Sql.Types.str),
        plugin: identifier alias "plugin" (Sql.Types.nullable Sql.Types.str),
        slotName: identifier alias "slot_name" (Sql.Types.nullable Sql.Types.str),
        safeWalSize: identifier alias "safe_wal_size" (Sql.Types.nullable Sql.Types.i64),
        activePid: identifier alias "active_pid" (Sql.Types.nullable Sql.Types.i32),
        walStatus: identifier alias "wal_status" (Sql.Types.nullable Sql.Types.str),
        slotType: identifier alias "slot_type" (Sql.Types.nullable Sql.Types.str),
        datoid: identifier alias "datoid" (Sql.Types.nullable Sql.Types.i32),
        catalogXmin: identifier alias "catalog_xmin" (Sql.Types.nullable Sql.Types.i32),
        xmin: identifier alias "xmin" (Sql.Types.nullable Sql.Types.i32),
        confirmedFlushLsn: identifier alias "confirmed_flush_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
        restartLsn: identifier alias "restart_lsn" (Sql.Types.nullable (Sql.Types.unsupported "pg_lsn")),
    },
}

pgStatReplicationSlots = {
    schema: "pg_catalog",
    name: "pg_stat_replication_slots",
    alias: "psrs",
    columns: |alias| {
        totalBytes: identifier alias "total_bytes" (Sql.Types.nullable Sql.Types.i64),
        totalTxns: identifier alias "total_txns" (Sql.Types.nullable Sql.Types.i64),
        streamBytes: identifier alias "stream_bytes" (Sql.Types.nullable Sql.Types.i64),
        streamCount: identifier alias "stream_count" (Sql.Types.nullable Sql.Types.i64),
        streamTxns: identifier alias "stream_txns" (Sql.Types.nullable Sql.Types.i64),
        spillBytes: identifier alias "spill_bytes" (Sql.Types.nullable Sql.Types.i64),
        spillCount: identifier alias "spill_count" (Sql.Types.nullable Sql.Types.i64),
        spillTxns: identifier alias "spill_txns" (Sql.Types.nullable Sql.Types.i64),
        slotName: identifier alias "slot_name" (Sql.Types.nullable Sql.Types.str),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatDatabase = {
    schema: "pg_catalog",
    name: "pg_stat_database",
    alias: "psd",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        sessionsKilled: identifier alias "sessions_killed" (Sql.Types.nullable Sql.Types.i64),
        sessionsFatal: identifier alias "sessions_fatal" (Sql.Types.nullable Sql.Types.i64),
        sessionsAbandoned: identifier alias "sessions_abandoned" (Sql.Types.nullable Sql.Types.i64),
        sessions: identifier alias "sessions" (Sql.Types.nullable Sql.Types.i64),
        checksumFailures: identifier alias "checksum_failures" (Sql.Types.nullable Sql.Types.i64),
        deadlocks: identifier alias "deadlocks" (Sql.Types.nullable Sql.Types.i64),
        tempBytes: identifier alias "temp_bytes" (Sql.Types.nullable Sql.Types.i64),
        tempFiles: identifier alias "temp_files" (Sql.Types.nullable Sql.Types.i64),
        conflicts: identifier alias "conflicts" (Sql.Types.nullable Sql.Types.i64),
        tupDeleted: identifier alias "tup_deleted" (Sql.Types.nullable Sql.Types.i64),
        tupUpdated: identifier alias "tup_updated" (Sql.Types.nullable Sql.Types.i64),
        tupInserted: identifier alias "tup_inserted" (Sql.Types.nullable Sql.Types.i64),
        tupFetched: identifier alias "tup_fetched" (Sql.Types.nullable Sql.Types.i64),
        tupReturned: identifier alias "tup_returned" (Sql.Types.nullable Sql.Types.i64),
        blksHit: identifier alias "blks_hit" (Sql.Types.nullable Sql.Types.i64),
        blksRead: identifier alias "blks_read" (Sql.Types.nullable Sql.Types.i64),
        xactRollback: identifier alias "xact_rollback" (Sql.Types.nullable Sql.Types.i64),
        xactCommit: identifier alias "xact_commit" (Sql.Types.nullable Sql.Types.i64),
        numbackends: identifier alias "numbackends" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
        idleInTransactionTime: identifier alias "idle_in_transaction_time" (Sql.Types.nullable Sql.Types.f64),
        activeTime: identifier alias "active_time" (Sql.Types.nullable Sql.Types.f64),
        sessionTime: identifier alias "session_time" (Sql.Types.nullable Sql.Types.f64),
        blkWriteTime: identifier alias "blk_write_time" (Sql.Types.nullable Sql.Types.f64),
        blkReadTime: identifier alias "blk_read_time" (Sql.Types.nullable Sql.Types.f64),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        checksumLastFailure: identifier alias "checksum_last_failure" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatDatabaseConflicts = {
    schema: "pg_catalog",
    name: "pg_stat_database_conflicts",
    alias: "psdc",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        conflDeadlock: identifier alias "confl_deadlock" (Sql.Types.nullable Sql.Types.i64),
        conflBufferpin: identifier alias "confl_bufferpin" (Sql.Types.nullable Sql.Types.i64),
        conflSnapshot: identifier alias "confl_snapshot" (Sql.Types.nullable Sql.Types.i64),
        conflLock: identifier alias "confl_lock" (Sql.Types.nullable Sql.Types.i64),
        conflTablespace: identifier alias "confl_tablespace" (Sql.Types.nullable Sql.Types.i64),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatUserFunctions = {
    schema: "pg_catalog",
    name: "pg_stat_user_functions",
    alias: "psuf",
    columns: |alias| {
        funcname: identifier alias "funcname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        calls: identifier alias "calls" (Sql.Types.nullable Sql.Types.i64),
        funcid: identifier alias "funcid" (Sql.Types.nullable Sql.Types.i32),
        selfTime: identifier alias "self_time" (Sql.Types.nullable Sql.Types.f64),
        totalTime: identifier alias "total_time" (Sql.Types.nullable Sql.Types.f64),
    },
}

pgStatXactUserFunctions = {
    schema: "pg_catalog",
    name: "pg_stat_xact_user_functions",
    alias: "psxuf",
    columns: |alias| {
        funcname: identifier alias "funcname" (Sql.Types.nullable Sql.Types.str),
        schemaname: identifier alias "schemaname" (Sql.Types.nullable Sql.Types.str),
        calls: identifier alias "calls" (Sql.Types.nullable Sql.Types.i64),
        funcid: identifier alias "funcid" (Sql.Types.nullable Sql.Types.i32),
        selfTime: identifier alias "self_time" (Sql.Types.nullable Sql.Types.f64),
        totalTime: identifier alias "total_time" (Sql.Types.nullable Sql.Types.f64),
    },
}

pgStatArchiver = {
    schema: "pg_catalog",
    name: "pg_stat_archiver",
    alias: "psa",
    columns: |alias| {
        failedCount: identifier alias "failed_count" (Sql.Types.nullable Sql.Types.i64),
        archivedCount: identifier alias "archived_count" (Sql.Types.nullable Sql.Types.i64),
        lastFailedWal: identifier alias "last_failed_wal" (Sql.Types.nullable Sql.Types.str),
        lastArchivedWal: identifier alias "last_archived_wal" (Sql.Types.nullable Sql.Types.str),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastFailedTime: identifier alias "last_failed_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        lastArchivedTime: identifier alias "last_archived_time" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatBgwriter = {
    schema: "pg_catalog",
    name: "pg_stat_bgwriter",
    alias: "psb",
    columns: |alias| {
        buffersAlloc: identifier alias "buffers_alloc" (Sql.Types.nullable Sql.Types.i64),
        buffersBackendFsync: identifier alias "buffers_backend_fsync" (Sql.Types.nullable Sql.Types.i64),
        buffersBackend: identifier alias "buffers_backend" (Sql.Types.nullable Sql.Types.i64),
        maxwrittenClean: identifier alias "maxwritten_clean" (Sql.Types.nullable Sql.Types.i64),
        buffersClean: identifier alias "buffers_clean" (Sql.Types.nullable Sql.Types.i64),
        buffersCheckpoint: identifier alias "buffers_checkpoint" (Sql.Types.nullable Sql.Types.i64),
        checkpointsReq: identifier alias "checkpoints_req" (Sql.Types.nullable Sql.Types.i64),
        checkpointsTimed: identifier alias "checkpoints_timed" (Sql.Types.nullable Sql.Types.i64),
        checkpointSyncTime: identifier alias "checkpoint_sync_time" (Sql.Types.nullable Sql.Types.f64),
        checkpointWriteTime: identifier alias "checkpoint_write_time" (Sql.Types.nullable Sql.Types.f64),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgStatWal = {
    schema: "pg_catalog",
    name: "pg_stat_wal",
    alias: "psw",
    columns: |alias| {
        walSync: identifier alias "wal_sync" (Sql.Types.nullable Sql.Types.i64),
        walWrite: identifier alias "wal_write" (Sql.Types.nullable Sql.Types.i64),
        walBuffersFull: identifier alias "wal_buffers_full" (Sql.Types.nullable Sql.Types.i64),
        walFpi: identifier alias "wal_fpi" (Sql.Types.nullable Sql.Types.i64),
        walRecords: identifier alias "wal_records" (Sql.Types.nullable Sql.Types.i64),
        walSyncTime: identifier alias "wal_sync_time" (Sql.Types.nullable Sql.Types.f64),
        walWriteTime: identifier alias "wal_write_time" (Sql.Types.nullable Sql.Types.f64),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
        walBytes: identifier alias "wal_bytes" (Sql.Types.nullable Sql.Types.dec),
    },
}

pgStatProgressAnalyze = {
    schema: "pg_catalog",
    name: "pg_stat_progress_analyze",
    alias: "pspa",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        childTablesDone: identifier alias "child_tables_done" (Sql.Types.nullable Sql.Types.i64),
        childTablesTotal: identifier alias "child_tables_total" (Sql.Types.nullable Sql.Types.i64),
        extStatsComputed: identifier alias "ext_stats_computed" (Sql.Types.nullable Sql.Types.i64),
        extStatsTotal: identifier alias "ext_stats_total" (Sql.Types.nullable Sql.Types.i64),
        sampleBlksScanned: identifier alias "sample_blks_scanned" (Sql.Types.nullable Sql.Types.i64),
        sampleBlksTotal: identifier alias "sample_blks_total" (Sql.Types.nullable Sql.Types.i64),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        phase: identifier alias "phase" (Sql.Types.nullable Sql.Types.str),
        currentChildTableRelid: identifier alias "current_child_table_relid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatProgressVacuum = {
    schema: "pg_catalog",
    name: "pg_stat_progress_vacuum",
    alias: "pspv",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        numDeadTuples: identifier alias "num_dead_tuples" (Sql.Types.nullable Sql.Types.i64),
        maxDeadTuples: identifier alias "max_dead_tuples" (Sql.Types.nullable Sql.Types.i64),
        indexVacuumCount: identifier alias "index_vacuum_count" (Sql.Types.nullable Sql.Types.i64),
        heapBlksVacuumed: identifier alias "heap_blks_vacuumed" (Sql.Types.nullable Sql.Types.i64),
        heapBlksScanned: identifier alias "heap_blks_scanned" (Sql.Types.nullable Sql.Types.i64),
        heapBlksTotal: identifier alias "heap_blks_total" (Sql.Types.nullable Sql.Types.i64),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        phase: identifier alias "phase" (Sql.Types.nullable Sql.Types.str),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatProgressCluster = {
    schema: "pg_catalog",
    name: "pg_stat_progress_cluster",
    alias: "pspc",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        indexRebuildCount: identifier alias "index_rebuild_count" (Sql.Types.nullable Sql.Types.i64),
        heapBlksScanned: identifier alias "heap_blks_scanned" (Sql.Types.nullable Sql.Types.i64),
        heapBlksTotal: identifier alias "heap_blks_total" (Sql.Types.nullable Sql.Types.i64),
        heapTuplesWritten: identifier alias "heap_tuples_written" (Sql.Types.nullable Sql.Types.i64),
        heapTuplesScanned: identifier alias "heap_tuples_scanned" (Sql.Types.nullable Sql.Types.i64),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        phase: identifier alias "phase" (Sql.Types.nullable Sql.Types.str),
        command: identifier alias "command" (Sql.Types.nullable Sql.Types.str),
        clusterIndexRelid: identifier alias "cluster_index_relid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatProgressCreateIndex = {
    schema: "pg_catalog",
    name: "pg_stat_progress_create_index",
    alias: "pspci",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        partitionsDone: identifier alias "partitions_done" (Sql.Types.nullable Sql.Types.i64),
        partitionsTotal: identifier alias "partitions_total" (Sql.Types.nullable Sql.Types.i64),
        tuplesDone: identifier alias "tuples_done" (Sql.Types.nullable Sql.Types.i64),
        tuplesTotal: identifier alias "tuples_total" (Sql.Types.nullable Sql.Types.i64),
        blocksDone: identifier alias "blocks_done" (Sql.Types.nullable Sql.Types.i64),
        blocksTotal: identifier alias "blocks_total" (Sql.Types.nullable Sql.Types.i64),
        currentLockerPid: identifier alias "current_locker_pid" (Sql.Types.nullable Sql.Types.i64),
        lockersDone: identifier alias "lockers_done" (Sql.Types.nullable Sql.Types.i64),
        lockersTotal: identifier alias "lockers_total" (Sql.Types.nullable Sql.Types.i64),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        phase: identifier alias "phase" (Sql.Types.nullable Sql.Types.str),
        command: identifier alias "command" (Sql.Types.nullable Sql.Types.str),
        indexRelid: identifier alias "index_relid" (Sql.Types.nullable Sql.Types.i32),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgStatProgressBasebackup = {
    schema: "pg_catalog",
    name: "pg_stat_progress_basebackup",
    alias: "pspb",
    columns: |alias| {
        tablespacesStreamed: identifier alias "tablespaces_streamed" (Sql.Types.nullable Sql.Types.i64),
        tablespacesTotal: identifier alias "tablespaces_total" (Sql.Types.nullable Sql.Types.i64),
        backupStreamed: identifier alias "backup_streamed" (Sql.Types.nullable Sql.Types.i64),
        backupTotal: identifier alias "backup_total" (Sql.Types.nullable Sql.Types.i64),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        phase: identifier alias "phase" (Sql.Types.nullable Sql.Types.str),
    },
}

pgStatProgressCopy = {
    schema: "pg_catalog",
    name: "pg_stat_progress_copy",
    alias: "pspc",
    columns: |alias| {
        datname: identifier alias "datname" (Sql.Types.nullable Sql.Types.str),
        tuplesExcluded: identifier alias "tuples_excluded" (Sql.Types.nullable Sql.Types.i64),
        tuplesProcessed: identifier alias "tuples_processed" (Sql.Types.nullable Sql.Types.i64),
        bytesTotal: identifier alias "bytes_total" (Sql.Types.nullable Sql.Types.i64),
        bytesProcessed: identifier alias "bytes_processed" (Sql.Types.nullable Sql.Types.i64),
        pid: identifier alias "pid" (Sql.Types.nullable Sql.Types.i32),
        type: identifier alias "type" (Sql.Types.nullable Sql.Types.str),
        command: identifier alias "command" (Sql.Types.nullable Sql.Types.str),
        relid: identifier alias "relid" (Sql.Types.nullable Sql.Types.i32),
        datid: identifier alias "datid" (Sql.Types.nullable Sql.Types.i32),
    },
}

pgUserMappings = {
    schema: "pg_catalog",
    name: "pg_user_mappings",
    alias: "pum",
    columns: |alias| {
        usename: identifier alias "usename" (Sql.Types.nullable Sql.Types.str),
        srvname: identifier alias "srvname" (Sql.Types.nullable Sql.Types.str),
        umuser: identifier alias "umuser" (Sql.Types.nullable Sql.Types.i32),
        srvid: identifier alias "srvid" (Sql.Types.nullable Sql.Types.i32),
        umid: identifier alias "umid" (Sql.Types.nullable Sql.Types.i32),
        umoptions: identifier alias "umoptions" (Sql.Types.nullable (Sql.Types.array (Sql.Types.nullable Sql.Types.str))),
    },
}

pgStatSubscriptionStats = {
    schema: "pg_catalog",
    name: "pg_stat_subscription_stats",
    alias: "psss",
    columns: |alias| {
        subname: identifier alias "subname" (Sql.Types.nullable Sql.Types.str),
        syncErrorCount: identifier alias "sync_error_count" (Sql.Types.nullable Sql.Types.i64),
        applyErrorCount: identifier alias "apply_error_count" (Sql.Types.nullable Sql.Types.i64),
        subid: identifier alias "subid" (Sql.Types.nullable Sql.Types.i32),
        statsReset: identifier alias "stats_reset" (Sql.Types.nullable (Sql.Types.unsupported "timestamptz")),
    },
}

pgLargeobjectPageno : Sql.Types.Decode (Sql.Types.PgI32 { pgLargeobjectPageno : {} }) I32
pgLargeobjectPageno = Sql.Types.i32

pgLargeobjectLoid : Sql.Types.Decode (Sql.Types.PgI32 { pgLargeobjectLoid : {} }) I32
pgLargeobjectLoid = Sql.Types.i32

pgLargeobject = {
    schema: "pg_catalog",
    name: "pg_largeobject",
    alias: "pl",
    columns: |alias| {
        data: identifier alias "data" (Sql.Types.unsupported "bytea"),
        pageno: identifier alias "pageno" pgLargeobjectPageno,
        loid: identifier alias "loid" pgLargeobjectLoid,
    },
}
