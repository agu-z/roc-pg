interface Generate
    exposes [module]
    imports [SanitizeName]

module : Str, List _ -> Str
module = \schemaName, tables ->
    moduleName = SanitizeName.module schemaName

    exposes =
        tables
        |> List.map \table ->
            defName = SanitizeName.def table.name
            "\(defName)," |> indent 2
        |> Str.joinWith "\n"

    tableDefs =
        tables
        |> List.map tableDef
        |> Str.joinWith "\n\n"

    """
    # This file was automatically generated by roc-sql

    interface \(moduleName) 
        exposes [
    \(exposes)
        ] 
        imports [
            sql.Sql.{ identifier },
            sql.Sql.Types,
        ]

    \(tableDefs)
    """

tableDef = \table ->
    defName = SanitizeName.def table.name

    columnsRecord =
        table.columns
        |> List.map columnField
        |> Str.joinWith "\n"

    alias = SanitizeName.tableAlias table.name

    """
    \(defName) = {
        schema: "\(table.schema)",
        name: "\(table.name)",
        alias: "\(alias)",
        columns: \\alias -> {
    \(columnsRecord)
        },
    }
    """

columnField = \column ->
    fieldName = SanitizeName.def column.name

    typeDecoder = 
        when decoderName column.dataType is
            Ok name ->
                "Sql.Types.\(name)"

            Err Unsupported ->
                "(Sql.Types.unsupported \"\(column.dataType)\")"

    decoder =
        if column.isNullable then
            "(Sql.Types.nullable \(typeDecoder))"
        else
            typeDecoder

    "\(fieldName): identifier alias \"\(column.name)\" \(decoder),"
    |> indent 2

decoderName : Str -> Result Str [Unsupported]
decoderName = \sqlType ->
    when sqlType is
        "int2" ->
            Ok "i16"

        "int4" | "oid" | "xid" ->
            Ok "i32"

        "int8" ->
            Ok "i64"

        "float4" ->
            Ok "f32"

        "float8" ->
            Ok "f64"

        "numeric" ->
            Ok "dec"

        "text" | "char" | "name" ->
            Ok "str"

        "bool" ->
            Ok "bool"

        _ ->
            # TODO:
            # https://www.postgresql.org/docs/current/datatype.html
            # - bytea
            # - date/time
            # - enums
            # - geo
            # - net
            # - uuid
            # - bit strings
            # - text search
            # - json
            # - arrays
            # - composite
            Err Unsupported

indent : Str, Nat -> Str
indent = \line, count ->
    spaces = Str.repeat "    " count
    "\(spaces)\(line)"

expect
    generated = module "public" [
        {
            name: "products",
            schema: "public",
            columns: [
                { name: "name", dataType: "text", isNullable: Bool.false },
                { name: "price", dataType: "numeric", isNullable: Bool.true },
            ],
        },
        {
            name: "users",
            schema: "public",
            columns: [
                { name: "id", dataType: "smallint", isNullable: Bool.false },
                { name: "active", dataType: "boolean", isNullable: Bool.false },
            ],
        },
    ]

    expected =
        """
        # This file was automatically generated by roc-sql

        interface Public 
            exposes [
                products,
                users,
            ] 
            imports [
                sql.Sql.{ identifier },
                sql.Sql.Types,
            ]

        products = {
            schema: "public",
            name: "products",
            columns: \\alias -> {
                name: identifier alias "name" Sql.Types.str,
                price: identifier alias "price" (Sql.Types.nullable Sql.Types.dec),
            },
        }

        users = {
            schema: "public",
            name: "users",
            columns: \\alias -> {
                id: identifier alias "id" Sql.Types.i16,
                active: identifier alias "active" Sql.Types.bool,
            },
        }
        """

    generated == expected
